================================================================================
= Fetch phase ==================================================================
================================================================================
===>  License APACHE20 accepted by the user
===>   py39-multidict-6.0.5 depends on file: /usr/local/sbin/pkg - found
===> Fetching all distfiles required by py39-multidict-6.0.5 for building
=> SHA256 Checksum OK for multidict-6.0.5.tar.gz.
=====
Message from python39-3.9.18_2:

--
Note that some standard Python modules are provided as separate ports
as they require additional dependencies. They are available as:

py39-gdbm       databases/py-gdbm@py39
py39-sqlite3    databases/py-sqlite3@py39
py39-tkinter    x11-toolkits/py-tkinter@py39
=====
Message from py39-pytest-runner-6.0.1:

--
===>   NOTICE:

This port is deprecated; you may wish to reconsider installing it:

pytest-runner depends on deprecated features of setuptools.

It is scheduled to be removed on or after 2024-12-31.
Create compiler links...
create symlink for cc
create symlink for cc (world)
create symlink for c++
create symlink for c++ (world)
create symlink for CC
create symlink for CC (world)
create symlink for clang
create symlink for clang (world)
create symlink for clang++
create symlink for clang++ (world)
=====
Message from ccache-3.7.12_6:

--
NOTE:
Please read /usr/local/share/doc/ccache/ccache-howto-freebsd.txt for
information on using ccache with FreeBSD ports and src.
================================================================================
= Listing installed packages before build ======================================
================================================================================
ccache-3.7.12_6
gettext-runtime-0.22.5
indexinfo-0.3.1
libedit-3.1.20230828_1,1
libffi-3.4.4_1
mpdecimal-4.0.0
pkg-1.20.9_1
py39-coverage-7.3.2
py39-cython-0.29.37
py39-exceptiongroup-1.2.0
py39-iniconfig-1.1.1_1
py39-packaging-23.2
py39-pluggy-1.4.0
py39-pytest-7.4.4,1
py39-pytest-cov-4.1.0
py39-pytest-runner-6.0.1
py39-setuptools-63.1.0_1
py39-sqlite3-3.9.18_7
py39-tomli-2.0.1_2
python39-3.9.18_2
readline-8.2.10
sqlite3-3.45.1,1
================================================================================
= Build package phase ==========================================================
================================================================================
===>  License APACHE20 accepted by the user
===>   py39-multidict-6.0.5 depends on file: /usr/local/sbin/pkg - found
===> Fetching all distfiles required by py39-multidict-6.0.5 for building
===>  Extracting for py39-multidict-6.0.5
=> SHA256 Checksum OK for multidict-6.0.5.tar.gz.
===>  Patching for py39-multidict-6.0.5
===>   py39-multidict-6.0.5 depends on executable: cython-3.9 - found
===>   py39-multidict-6.0.5 depends on package: py39-setuptools>=63.1.0 - found
===>   py39-multidict-6.0.5 depends on file: /usr/local/bin/python3.9 - found
===>   py39-multidict-6.0.5 depends on file: /usr/local/bin/ccache - found
===>  Configuring for py39-multidict-6.0.5
*********************
* Accelerated build *
*********************
running config
===>  Building for py39-multidict-6.0.5
*********************
* Accelerated build *
*********************
running build
running build_py
creating build
creating build/lib.freebsd-14.0-RELEASE-amd64-cpython-39
creating build/lib.freebsd-14.0-RELEASE-amd64-cpython-39/multidict
copying multidict/_abc.py -> build/lib.freebsd-14.0-RELEASE-amd64-cpython-39/multidict
copying multidict/__init__.py -> build/lib.freebsd-14.0-RELEASE-amd64-cpython-39/multidict
copying multidict/_compat.py -> build/lib.freebsd-14.0-RELEASE-amd64-cpython-39/multidict
copying multidict/_multidict_py.py -> build/lib.freebsd-14.0-RELEASE-amd64-cpython-39/multidict
copying multidict/_multidict_base.py -> build/lib.freebsd-14.0-RELEASE-amd64-cpython-39/multidict
running build_ext
building 'multidict._multidict' extension
creating build/temp.freebsd-14.0-RELEASE-amd64-cpython-39
creating build/temp.freebsd-14.0-RELEASE-amd64-cpython-39/multidict
cc -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -O2 -pipe -fstack-protector-strong -fno-strict-aliasing -O2 -pipe -fstack-protector-strong -fno-strict-aliasing -fPIC -I/usr/local/include/python3.9 -c multidict/_multidict.c -o build/temp.freebsd-14.0-RELEASE-amd64-cpython-39/multidict/_multidict.o -O2 -std=c99 -Wall -Wsign-compare -Wconversion -fno-strict-aliasing -pedantic
cc -shared -fstack-protector-strong -O2 -pipe -fstack-protector-strong -fno-strict-aliasing build/temp.freebsd-14.0-RELEASE-amd64-cpython-39/multidict/_multidict.o -L/usr/local/lib -o build/lib.freebsd-14.0-RELEASE-amd64-cpython-39/multidict/_multidict.cpython-39.so
===>  Staging for py39-multidict-6.0.5
===>   py39-multidict-6.0.5 depends on package: py39-setuptools>=63.1.0 - found
===>   py39-multidict-6.0.5 depends on file: /usr/local/bin/python3.9 - found
===>   Generating temporary packing list
*********************
* Accelerated build *
*********************
running install
/usr/local/lib/python3.9/site-packages/setuptools/command/install.py:34: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools.
  warnings.warn(
running build
running build_py
running build_ext
running install_lib
creating /work/usr/ports/www/py-multidict/work-py39/stage/usr/local/lib/python3.9
creating /work/usr/ports/www/py-multidict/work-py39/stage/usr/local/lib/python3.9/site-packages
creating /work/usr/ports/www/py-multidict/work-py39/stage/usr/local/lib/python3.9/site-packages/multidict
copying build/lib.freebsd-14.0-RELEASE-amd64-cpython-39/multidict/_multidict_py.py -> /work/usr/ports/www/py-multidict/work-py39/stage/usr/local/lib/python3.9/site-packages/multidict
copying build/lib.freebsd-14.0-RELEASE-amd64-cpython-39/multidict/_compat.py -> /work/usr/ports/www/py-multidict/work-py39/stage/usr/local/lib/python3.9/site-packages/multidict
copying build/lib.freebsd-14.0-RELEASE-amd64-cpython-39/multidict/_multidict_base.py -> /work/usr/ports/www/py-multidict/work-py39/stage/usr/local/lib/python3.9/site-packages/multidict
copying build/lib.freebsd-14.0-RELEASE-amd64-cpython-39/multidict/__init__.py -> /work/usr/ports/www/py-multidict/work-py39/stage/usr/local/lib/python3.9/site-packages/multidict
copying build/lib.freebsd-14.0-RELEASE-amd64-cpython-39/multidict/_abc.py -> /work/usr/ports/www/py-multidict/work-py39/stage/usr/local/lib/python3.9/site-packages/multidict
copying build/lib.freebsd-14.0-RELEASE-amd64-cpython-39/multidict/_multidict.cpython-39.so -> /work/usr/ports/www/py-multidict/work-py39/stage/usr/local/lib/python3.9/site-packages/multidict
byte-compiling /work/usr/ports/www/py-multidict/work-py39/stage/usr/local/lib/python3.9/site-packages/multidict/_multidict_py.py to _multidict_py.cpython-39.pyc
byte-compiling /work/usr/ports/www/py-multidict/work-py39/stage/usr/local/lib/python3.9/site-packages/multidict/_compat.py to _compat.cpython-39.pyc
byte-compiling /work/usr/ports/www/py-multidict/work-py39/stage/usr/local/lib/python3.9/site-packages/multidict/_multidict_base.py to _multidict_base.cpython-39.pyc
byte-compiling /work/usr/ports/www/py-multidict/work-py39/stage/usr/local/lib/python3.9/site-packages/multidict/__init__.py to __init__.cpython-39.pyc
byte-compiling /work/usr/ports/www/py-multidict/work-py39/stage/usr/local/lib/python3.9/site-packages/multidict/_abc.py to _abc.cpython-39.pyc
writing byte-compilation script '/tmp/tmpdbk4z2rw.py'
/usr/local/bin/python3.9 /tmp/tmpdbk4z2rw.py
removing /tmp/tmpdbk4z2rw.py
running install_egg_info
running egg_info
writing multidict.egg-info/PKG-INFO
writing dependency_links to multidict.egg-info/dependency_links.txt
writing top-level names to multidict.egg-info/top_level.txt
reading manifest file 'multidict.egg-info/SOURCES.txt'
reading manifest template 'MANIFEST.in'
warning: no previously-included files matching '*.pyc' found anywhere in distribution
warning: no previously-included files found matching 'multidict/_multidict.html'
warning: no previously-included files found matching 'multidict/*.so'
warning: no previously-included files found matching 'multidict/*.pyd'
warning: no previously-included files found matching 'multidict/*.pyd'
no previously-included directories found matching 'docs/_build'
adding license file 'LICENSE'
writing manifest file 'multidict.egg-info/SOURCES.txt'
Copying multidict.egg-info to /work/usr/ports/www/py-multidict/work-py39/stage/usr/local/lib/python3.9/site-packages/multidict-6.0.5-py3.9.egg-info
running install_scripts
writing list of installed files to '/work/usr/ports/www/py-multidict/work-py39/.PLIST.pymodtmp'
====> Compressing man pages (compress-man)
====> Running Q/A tests (stage-qa)
====> Checking for pkg-plist issues (check-plist)
===> Parsing plist
===> Checking for items in STAGEDIR missing from pkg-plist
===> Checking for items in pkg-plist which are not in STAGEDIR
===> No pkg-plist issues found (check-plist)
===>  Building packages for py39-multidict-6.0.5
===>   Building py39-multidict-6.0.5
================================================================================
= Install package phase ========================================================
================================================================================
[reprise-builder] Installing py39-multidict-6.0.5...
[reprise-builder] Extracting py39-multidict-6.0.5: .......... done
================================================================================
= Listing used shared libraries ================================================
================================================================================
 0x0000000000000001 NEEDED               Shared library: [libc.so.7]
================================================================================
= Testing phase ================================================================
================================================================================
===>  Testing for py39-multidict-6.0.5
===>   py39-multidict-6.0.5 depends on package: py39-pytest-runner>=0 - found
===>   py39-multidict-6.0.5 depends on package: py39-pytest-cov>=0 - found
===>   py39-multidict-6.0.5 depends on package: py39-pytest>=7,1 - found
===>   py39-multidict-6.0.5 depends on file: /usr/local/bin/python3.9 - found
cd /work/usr/ports/www/py-multidict/work-py39/multidict-6.0.5 && /usr/bin/env -i HOME=/work/usr/ports/www/py-multidict/work-py39  PWD="${PWD}"  __MAKE_CONF=/nonexistent OSVERSION=1400097 PATH=/usr/local/libexec/ccache:/work/usr/ports/www/py-multidict/work-py39/.bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin UNAME_m=amd64 UNAME_p=amd64 UNAME_r=14.0-RELEASE UNAME_v=FreeBSD\ 14.0-RELEASE XDG_DATA_HOME=/work/usr/ports/www/py-multidict/work-py39  XDG_CONFIG_HOME=/work/usr/ports/www/py-multidict/work-py39  XDG_CACHE_HOME=/work/usr/ports/www/py-multidict/work-py39/.cache  HOME=/work/usr/ports/www/py-multidict/work-py39 PATH=/usr/local/libexec/ccache:/work/usr/ports/www/py-multidict/work-py39/.bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin PKG_CONFIG_LIBDIR=/work/usr/ports/www/py-multidict/work-py39/.pkgconfig:/usr/local/libdata/pkgconfig:/usr/local/share/pkgconfig:/usr/libdata/pkgconfig MK_DEBUG_FILES=no MK_KERNEL_SYMBOLS=no SHELL=/bin/sh NO_LINT=YES LDSHARED="cc -shared" PYTHONDONTWRITEBYTECODE= PYTHONOPTIMIZE= PREFIX=/usr/local  LOCALBASE=/usr/local  CC="cc" CFLAGS="-O2 -pipe  -fstack-protector-strong -fno-strict-aliasing "  CPP="cpp" CPPFLAGS=""  LDFLAGS=" -fstack-protector-strong " LIBS=""  CXX="c++" CXXFLAGS="-O2 -pipe -fstack-protector-strong -fno-strict-aliasing  " CCACHE_DIR="/ccache" BSD_INSTALL_PROGRAM="install  -s -m 555"  BSD_INSTALL_LIB="install  -s -m 0644"  BSD_INSTALL_SCRIPT="install  -m 555"  BSD_INSTALL_DATA="install  -m 0644"  BSD_INSTALL_MAN="install  -m 444" /usr/local/bin/python3.9 -m pytest -k '' -rs -v -o addopts= 
============================= test session starts ==============================
platform freebsd14 -- Python 3.9.18, pytest-7.4.4, pluggy-1.4.0 -- /usr/local/bin/python3.9
cachedir: .pytest_cache
rootdir: /work/usr/ports/www/py-multidict/work-py39/multidict-6.0.5
configfile: pytest.ini
testpaths: tests/
plugins: cov-4.1.0
collecting ... collected 913 items

tests/test_abc.py::test_abc_inheritance PASSED                           [  0%]
tests/test_abc.py::test_abc_getall PASSED                                [  0%]
tests/test_abc.py::test_abc_getone PASSED                                [  0%]
tests/test_abc.py::test_abc_add PASSED                                   [  0%]
tests/test_abc.py::test_abc_extend PASSED                                [  0%]
tests/test_abc.py::test_abc_popone PASSED                                [  0%]
tests/test_abc.py::test_abc_popall PASSED                                [  0%]
tests/test_abc.py::test_multidict_inheritance[case-sensitive-c-extension-module] ERROR [  0%]
tests/test_abc.py::test_proxy_inheritance[case-sensitive-c-extension-module] ERROR [  0%]
tests/test_copy.py::test_copy[case-sensitive-c-extension-module] ERROR   [  1%]
tests/test_copy.py::test_copy_proxy[case-sensitive-c-extension-module] ERROR [  1%]
tests/test_copy.py::test_copy_std_copy[case-sensitive-c-extension-module] ERROR [  1%]
tests/test_copy.py::test_ci_multidict_clone[case-sensitive-c-extension-module] ERROR [  1%]
tests/test_multidict.py::test_proxy_copy[case-sensitive-c-extension-module] ERROR [  1%]
tests/test_multidict.py::test_multidict_subclassing[case-sensitive-c-extension-module] ERROR [  1%]
tests/test_multidict.py::test_multidict_proxy_subclassing[case-sensitive-c-extension-module] ERROR [  1%]
tests/test_pickle.py::test_pickle[case-sensitive-c-extension-module-0] ERROR [  1%]
tests/test_pickle.py::test_load_from_file[c-extension-module-case-sensitive-0] ERROR [  1%]
tests/test_pickle.py::test_pickle[case-sensitive-c-extension-module-1] ERROR [  2%]
tests/test_pickle.py::test_load_from_file[c-extension-module-case-sensitive-1] ERROR [  2%]
tests/test_pickle.py::test_pickle[case-sensitive-c-extension-module-2] ERROR [  2%]
tests/test_pickle.py::test_load_from_file[c-extension-module-case-sensitive-2] ERROR [  2%]
tests/test_pickle.py::test_pickle[case-sensitive-c-extension-module-3] ERROR [  2%]
tests/test_pickle.py::test_load_from_file[c-extension-module-case-sensitive-3] ERROR [  2%]
tests/test_pickle.py::test_pickle[case-sensitive-c-extension-module-4] ERROR [  2%]
tests/test_pickle.py::test_load_from_file[c-extension-module-case-sensitive-4] ERROR [  2%]
tests/test_pickle.py::test_pickle[case-sensitive-c-extension-module-5] ERROR [  2%]
tests/test_pickle.py::test_load_from_file[c-extension-module-case-sensitive-5] ERROR [  3%]
tests/test_pickle.py::test_pickle_proxy[case-sensitive-c-extension-module] ERROR [  3%]
tests/test_update.py::test_update_replace[case-sensitive-c-extension-module] ERROR [  3%]
tests/test_update.py::test_update_append[case-sensitive-c-extension-module] ERROR [  3%]
tests/test_update.py::test_update_remove[case-sensitive-c-extension-module] ERROR [  3%]
tests/test_update.py::test_update_replace_seq[case-sensitive-c-extension-module] ERROR [  3%]
tests/test_update.py::test_update_replace_seq2[case-sensitive-c-extension-module] ERROR [  3%]
tests/test_update.py::test_update_append_seq[case-sensitive-c-extension-module] ERROR [  3%]
tests/test_update.py::test_update_remove_seq[case-sensitive-c-extension-module] ERROR [  3%]
tests/test_update.py::test_update_list_arg_and_kwds[case-sensitive-c-extension-module] ERROR [  4%]
tests/test_update.py::test_update_tuple_arg_and_kwds[case-sensitive-c-extension-module] ERROR [  4%]
tests/test_update.py::test_update_deque_arg_and_kwds[case-sensitive-c-extension-module] ERROR [  4%]
tests/test_version.py::test_ctor[case-sensitive-c-extension-module] ERROR [  4%]
tests/test_version.py::test_add[case-sensitive-c-extension-module] ERROR [  4%]
tests/test_version.py::test_delitem[case-sensitive-c-extension-module] ERROR [  4%]
tests/test_version.py::test_delitem_not_found[case-sensitive-c-extension-module] ERROR [  4%]
tests/test_version.py::test_setitem[case-sensitive-c-extension-module] ERROR [  4%]
tests/test_version.py::test_setitem_not_found[case-sensitive-c-extension-module] ERROR [  4%]
tests/test_version.py::test_clear[case-sensitive-c-extension-module] ERROR [  5%]
tests/test_version.py::test_setdefault[case-sensitive-c-extension-module] ERROR [  5%]
tests/test_version.py::test_popone[case-sensitive-c-extension-module] ERROR [  5%]
tests/test_version.py::test_popone_default[case-sensitive-c-extension-module] ERROR [  5%]
tests/test_version.py::test_popone_key_error[case-sensitive-c-extension-module] ERROR [  5%]
tests/test_version.py::test_pop[case-sensitive-c-extension-module] ERROR [  5%]
tests/test_version.py::test_pop_default[case-sensitive-c-extension-module] ERROR [  5%]
tests/test_version.py::test_pop_key_error[case-sensitive-c-extension-module] ERROR [  5%]
tests/test_version.py::test_popall[case-sensitive-c-extension-module] ERROR [  5%]
tests/test_version.py::test_popall_default[case-sensitive-c-extension-module] ERROR [  6%]
tests/test_version.py::test_popall_key_error[case-sensitive-c-extension-module] ERROR [  6%]
tests/test_version.py::test_popitem[case-sensitive-c-extension-module] ERROR [  6%]
tests/test_version.py::test_popitem_key_error[case-sensitive-c-extension-module] ERROR [  6%]
tests/test_abc.py::test_multidict_inheritance[case-sensitive-pure-python-module] PASSED [  6%]
tests/test_abc.py::test_proxy_inheritance[case-sensitive-pure-python-module] PASSED [  6%]
tests/test_copy.py::test_copy[case-sensitive-pure-python-module] PASSED  [  6%]
tests/test_copy.py::test_copy_proxy[case-sensitive-pure-python-module] PASSED [  6%]
tests/test_copy.py::test_copy_std_copy[case-sensitive-pure-python-module] PASSED [  6%]
tests/test_copy.py::test_ci_multidict_clone[case-sensitive-pure-python-module] PASSED [  7%]
tests/test_multidict.py::test_proxy_copy[case-sensitive-pure-python-module] PASSED [  7%]
tests/test_multidict.py::test_multidict_subclassing[case-sensitive-pure-python-module] PASSED [  7%]
tests/test_multidict.py::test_multidict_proxy_subclassing[case-sensitive-pure-python-module] PASSED [  7%]
tests/test_pickle.py::test_pickle[case-sensitive-pure-python-module-0] PASSED [  7%]
tests/test_pickle.py::test_load_from_file[c-extension-module-case-insensitive-0] ERROR [  7%]
tests/test_abc.py::test_multidict_inheritance[case-insensitive-pure-python-module] PASSED [  7%]
tests/test_abc.py::test_proxy_inheritance[case-insensitive-pure-python-module] PASSED [  7%]
tests/test_copy.py::test_copy[case-insensitive-pure-python-module] PASSED [  7%]
tests/test_copy.py::test_copy_proxy[case-insensitive-pure-python-module] PASSED [  7%]
tests/test_copy.py::test_copy_std_copy[case-insensitive-pure-python-module] PASSED [  8%]
tests/test_copy.py::test_ci_multidict_clone[case-insensitive-pure-python-module] PASSED [  8%]
tests/test_multidict.py::test_proxy_copy[case-insensitive-pure-python-module] PASSED [  8%]
tests/test_multidict.py::test_multidict_subclassing[case-insensitive-pure-python-module] PASSED [  8%]
tests/test_multidict.py::test_multidict_proxy_subclassing[case-insensitive-pure-python-module] PASSED [  8%]
tests/test_pickle.py::test_pickle[case-insensitive-pure-python-module-0] PASSED [  8%]
tests/test_pickle.py::test_load_from_file[pure-python-module-case-insensitive-0] PASSED [  8%]
tests/test_pickle.py::test_pickle[case-insensitive-pure-python-module-1] PASSED [  8%]
tests/test_pickle.py::test_load_from_file[pure-python-module-case-insensitive-1] PASSED [  8%]
tests/test_pickle.py::test_pickle[case-insensitive-pure-python-module-2] PASSED [  9%]
tests/test_pickle.py::test_load_from_file[pure-python-module-case-insensitive-2] PASSED [  9%]
tests/test_pickle.py::test_pickle[case-insensitive-pure-python-module-3] PASSED [  9%]
tests/test_pickle.py::test_load_from_file[pure-python-module-case-insensitive-3] PASSED [  9%]
tests/test_pickle.py::test_pickle[case-insensitive-pure-python-module-4] PASSED [  9%]
tests/test_pickle.py::test_load_from_file[pure-python-module-case-insensitive-4] PASSED [  9%]
tests/test_pickle.py::test_pickle[case-insensitive-pure-python-module-5] PASSED [  9%]
tests/test_pickle.py::test_load_from_file[pure-python-module-case-insensitive-5] PASSED [  9%]
tests/test_pickle.py::test_pickle_proxy[case-insensitive-pure-python-module] PASSED [  9%]
tests/test_update.py::test_update_replace[case-insensitive-pure-python-module] PASSED [ 10%]
tests/test_update.py::test_update_append[case-insensitive-pure-python-module] PASSED [ 10%]
tests/test_update.py::test_update_remove[case-insensitive-pure-python-module] PASSED [ 10%]
tests/test_update.py::test_update_replace_seq[case-insensitive-pure-python-module] PASSED [ 10%]
tests/test_update.py::test_update_replace_seq2[case-insensitive-pure-python-module] PASSED [ 10%]
tests/test_update.py::test_update_append_seq[case-insensitive-pure-python-module] PASSED [ 10%]
tests/test_update.py::test_update_remove_seq[case-insensitive-pure-python-module] PASSED [ 10%]
tests/test_update.py::test_update_list_arg_and_kwds[case-insensitive-pure-python-module] PASSED [ 10%]
tests/test_update.py::test_update_tuple_arg_and_kwds[case-insensitive-pure-python-module] PASSED [ 10%]
tests/test_update.py::test_update_deque_arg_and_kwds[case-insensitive-pure-python-module] PASSED [ 11%]
tests/test_version.py::test_ctor[case-insensitive-pure-python-module] PASSED [ 11%]
tests/test_version.py::test_add[case-insensitive-pure-python-module] PASSED [ 11%]
tests/test_version.py::test_delitem[case-insensitive-pure-python-module] PASSED [ 11%]
tests/test_version.py::test_delitem_not_found[case-insensitive-pure-python-module] PASSED [ 11%]
tests/test_version.py::test_setitem[case-insensitive-pure-python-module] PASSED [ 11%]
tests/test_version.py::test_setitem_not_found[case-insensitive-pure-python-module] PASSED [ 11%]
tests/test_version.py::test_clear[case-insensitive-pure-python-module] PASSED [ 11%]
tests/test_version.py::test_setdefault[case-insensitive-pure-python-module] PASSED [ 11%]
tests/test_version.py::test_popone[case-insensitive-pure-python-module] PASSED [ 12%]
tests/test_version.py::test_popone_default[case-insensitive-pure-python-module] PASSED [ 12%]
tests/test_version.py::test_popone_key_error[case-insensitive-pure-python-module] PASSED [ 12%]
tests/test_version.py::test_pop[case-insensitive-pure-python-module] PASSED [ 12%]
tests/test_version.py::test_pop_default[case-insensitive-pure-python-module] PASSED [ 12%]
tests/test_version.py::test_pop_key_error[case-insensitive-pure-python-module] PASSED [ 12%]
tests/test_version.py::test_popall[case-insensitive-pure-python-module] PASSED [ 12%]
tests/test_version.py::test_popall_default[case-insensitive-pure-python-module] PASSED [ 12%]
tests/test_version.py::test_popall_key_error[case-insensitive-pure-python-module] PASSED [ 12%]
tests/test_version.py::test_popitem[case-insensitive-pure-python-module] PASSED [ 13%]
tests/test_version.py::test_popitem_key_error[case-insensitive-pure-python-module] PASSED [ 13%]
tests/test_abc.py::test_multidict_inheritance[case-insensitive-c-extension-module] ERROR [ 13%]
tests/test_abc.py::test_proxy_inheritance[case-insensitive-c-extension-module] ERROR [ 13%]
tests/test_copy.py::test_copy[case-insensitive-c-extension-module] ERROR [ 13%]
tests/test_copy.py::test_copy_proxy[case-insensitive-c-extension-module] ERROR [ 13%]
tests/test_copy.py::test_copy_std_copy[case-insensitive-c-extension-module] ERROR [ 13%]
tests/test_copy.py::test_ci_multidict_clone[case-insensitive-c-extension-module] ERROR [ 13%]
tests/test_multidict.py::test_proxy_copy[case-insensitive-c-extension-module] ERROR [ 13%]
tests/test_multidict.py::test_multidict_subclassing[case-insensitive-c-extension-module] ERROR [ 14%]
tests/test_multidict.py::test_multidict_proxy_subclassing[case-insensitive-c-extension-module] ERROR [ 14%]
tests/test_pickle.py::test_pickle[case-insensitive-c-extension-module-0] ERROR [ 14%]
tests/test_pickle.py::test_load_from_file[pure-python-module-case-sensitive-0] PASSED [ 14%]
tests/test_pickle.py::test_pickle[case-insensitive-c-extension-module-1] ERROR [ 14%]
tests/test_pickle.py::test_load_from_file[pure-python-module-case-sensitive-1] PASSED [ 14%]
tests/test_pickle.py::test_pickle[case-insensitive-c-extension-module-2] ERROR [ 14%]
tests/test_pickle.py::test_load_from_file[pure-python-module-case-sensitive-2] PASSED [ 14%]
tests/test_pickle.py::test_pickle[case-insensitive-c-extension-module-3] ERROR [ 14%]
tests/test_pickle.py::test_load_from_file[pure-python-module-case-sensitive-3] PASSED [ 15%]
tests/test_pickle.py::test_pickle[case-insensitive-c-extension-module-4] ERROR [ 15%]
tests/test_pickle.py::test_load_from_file[pure-python-module-case-sensitive-4] PASSED [ 15%]
tests/test_pickle.py::test_pickle[case-insensitive-c-extension-module-5] ERROR [ 15%]
tests/test_pickle.py::test_load_from_file[pure-python-module-case-sensitive-5] PASSED [ 15%]
tests/test_pickle.py::test_pickle_proxy[case-insensitive-c-extension-module] ERROR [ 15%]
tests/test_pickle.py::test_load_from_file[c-extension-module-case-insensitive-1] ERROR [ 15%]
tests/test_pickle.py::test_pickle[case-sensitive-pure-python-module-1] PASSED [ 15%]
tests/test_pickle.py::test_load_from_file[c-extension-module-case-insensitive-2] ERROR [ 15%]
tests/test_pickle.py::test_pickle[case-sensitive-pure-python-module-2] PASSED [ 15%]
tests/test_pickle.py::test_load_from_file[c-extension-module-case-insensitive-3] ERROR [ 16%]
tests/test_pickle.py::test_pickle[case-sensitive-pure-python-module-3] PASSED [ 16%]
tests/test_pickle.py::test_load_from_file[c-extension-module-case-insensitive-4] ERROR [ 16%]
tests/test_pickle.py::test_pickle[case-sensitive-pure-python-module-4] PASSED [ 16%]
tests/test_pickle.py::test_load_from_file[c-extension-module-case-insensitive-5] ERROR [ 16%]
tests/test_pickle.py::test_pickle[case-sensitive-pure-python-module-5] PASSED [ 16%]
tests/test_update.py::test_update_replace[case-insensitive-c-extension-module] ERROR [ 16%]
tests/test_update.py::test_update_append[case-insensitive-c-extension-module] ERROR [ 16%]
tests/test_update.py::test_update_remove[case-insensitive-c-extension-module] ERROR [ 16%]
tests/test_update.py::test_update_replace_seq[case-insensitive-c-extension-module] ERROR [ 17%]
tests/test_update.py::test_update_replace_seq2[case-insensitive-c-extension-module] ERROR [ 17%]
tests/test_update.py::test_update_append_seq[case-insensitive-c-extension-module] ERROR [ 17%]
tests/test_update.py::test_update_remove_seq[case-insensitive-c-extension-module] ERROR [ 17%]
tests/test_update.py::test_update_list_arg_and_kwds[case-insensitive-c-extension-module] ERROR [ 17%]
tests/test_update.py::test_update_tuple_arg_and_kwds[case-insensitive-c-extension-module] ERROR [ 17%]
tests/test_update.py::test_update_deque_arg_and_kwds[case-insensitive-c-extension-module] ERROR [ 17%]
tests/test_version.py::test_ctor[case-insensitive-c-extension-module] ERROR [ 17%]
tests/test_version.py::test_add[case-insensitive-c-extension-module] ERROR [ 17%]
tests/test_version.py::test_delitem[case-insensitive-c-extension-module] ERROR [ 18%]
tests/test_version.py::test_delitem_not_found[case-insensitive-c-extension-module] ERROR [ 18%]
tests/test_version.py::test_setitem[case-insensitive-c-extension-module] ERROR [ 18%]
tests/test_version.py::test_setitem_not_found[case-insensitive-c-extension-module] ERROR [ 18%]
tests/test_version.py::test_clear[case-insensitive-c-extension-module] ERROR [ 18%]
tests/test_version.py::test_setdefault[case-insensitive-c-extension-module] ERROR [ 18%]
tests/test_version.py::test_popone[case-insensitive-c-extension-module] ERROR [ 18%]
tests/test_version.py::test_popone_default[case-insensitive-c-extension-module] ERROR [ 18%]
tests/test_version.py::test_popone_key_error[case-insensitive-c-extension-module] ERROR [ 18%]
tests/test_version.py::test_pop[case-insensitive-c-extension-module] ERROR [ 19%]
tests/test_version.py::test_pop_default[case-insensitive-c-extension-module] ERROR [ 19%]
tests/test_version.py::test_pop_key_error[case-insensitive-c-extension-module] ERROR [ 19%]
tests/test_version.py::test_popall[case-insensitive-c-extension-module] ERROR [ 19%]
tests/test_version.py::test_popall_default[case-insensitive-c-extension-module] ERROR [ 19%]
tests/test_version.py::test_popall_key_error[case-insensitive-c-extension-module] ERROR [ 19%]
tests/test_version.py::test_popitem[case-insensitive-c-extension-module] ERROR [ 19%]
tests/test_version.py::test_popitem_key_error[case-insensitive-c-extension-module] ERROR [ 19%]
tests/test_multidict.py::test_exposed_names[case-insensitive] PASSED     [ 19%]
tests/test_pickle.py::test_pickle_proxy[case-sensitive-pure-python-module] PASSED [ 20%]
tests/test_update.py::test_update_replace[case-sensitive-pure-python-module] PASSED [ 20%]
tests/test_update.py::test_update_append[case-sensitive-pure-python-module] PASSED [ 20%]
tests/test_update.py::test_update_remove[case-sensitive-pure-python-module] PASSED [ 20%]
tests/test_update.py::test_update_replace_seq[case-sensitive-pure-python-module] PASSED [ 20%]
tests/test_update.py::test_update_replace_seq2[case-sensitive-pure-python-module] PASSED [ 20%]
tests/test_update.py::test_update_append_seq[case-sensitive-pure-python-module] PASSED [ 20%]
tests/test_update.py::test_update_remove_seq[case-sensitive-pure-python-module] PASSED [ 20%]
tests/test_update.py::test_update_list_arg_and_kwds[case-sensitive-pure-python-module] PASSED [ 20%]
tests/test_update.py::test_update_tuple_arg_and_kwds[case-sensitive-pure-python-module] PASSED [ 21%]
tests/test_update.py::test_update_deque_arg_and_kwds[case-sensitive-pure-python-module] PASSED [ 21%]
tests/test_version.py::test_ctor[case-sensitive-pure-python-module] PASSED [ 21%]
tests/test_version.py::test_add[case-sensitive-pure-python-module] PASSED [ 21%]
tests/test_version.py::test_delitem[case-sensitive-pure-python-module] PASSED [ 21%]
tests/test_version.py::test_delitem_not_found[case-sensitive-pure-python-module] PASSED [ 21%]
tests/test_version.py::test_setitem[case-sensitive-pure-python-module] PASSED [ 21%]
tests/test_version.py::test_setitem_not_found[case-sensitive-pure-python-module] PASSED [ 21%]
tests/test_version.py::test_clear[case-sensitive-pure-python-module] PASSED [ 21%]
tests/test_version.py::test_setdefault[case-sensitive-pure-python-module] PASSED [ 22%]
tests/test_version.py::test_popone[case-sensitive-pure-python-module] PASSED [ 22%]
tests/test_version.py::test_popone_default[case-sensitive-pure-python-module] PASSED [ 22%]
tests/test_version.py::test_popone_key_error[case-sensitive-pure-python-module] PASSED [ 22%]
tests/test_version.py::test_pop[case-sensitive-pure-python-module] PASSED [ 22%]
tests/test_version.py::test_pop_default[case-sensitive-pure-python-module] PASSED [ 22%]
tests/test_version.py::test_pop_key_error[case-sensitive-pure-python-module] PASSED [ 22%]
tests/test_version.py::test_popall[case-sensitive-pure-python-module] PASSED [ 22%]
tests/test_version.py::test_popall_default[case-sensitive-pure-python-module] PASSED [ 22%]
tests/test_version.py::test_popall_key_error[case-sensitive-pure-python-module] PASSED [ 23%]
tests/test_version.py::test_popitem[case-sensitive-pure-python-module] PASSED [ 23%]
tests/test_version.py::test_popitem_key_error[case-sensitive-pure-python-module] PASSED [ 23%]
tests/test_guard.py::test_guard_items[pure-python-module] PASSED         [ 23%]
tests/test_guard.py::test_guard_keys[pure-python-module] PASSED          [ 23%]
tests/test_guard.py::test_guard_values[pure-python-module] PASSED        [ 23%]
tests/test_istr.py::test_ctor[pure-python-module] PASSED                 [ 23%]
tests/test_istr.py::test_ctor_str[pure-python-module] PASSED             [ 23%]
tests/test_istr.py::test_ctor_istr[pure-python-module] PASSED            [ 23%]
tests/test_istr.py::test_ctor_buffer[pure-python-module] PASSED          [ 23%]
tests/test_istr.py::test_ctor_repr[pure-python-module] PASSED            [ 24%]
tests/test_istr.py::test_str[pure-python-module] PASSED                  [ 24%]
tests/test_istr.py::test_eq[pure-python-module] PASSED                   [ 24%]
tests/test_istr.py::test_leak[pure-python-module] PASSED                 [ 24%]
tests/test_multidict.py::test__iter__types[pure-python-module-cls0-str] PASSED [ 24%]
tests/test_multidict.py::test__iter__types[pure-python-module-cls1-str] PASSED [ 24%]
tests/test_multidict.py::TestMultiDict::test_instantiate__empty[pure-python-module-cls0] PASSED [ 24%]
tests/test_multidict.py::TestMultiDict::test_instantiate__empty[pure-python-module-cls1] PASSED [ 24%]
tests/test_multidict.py::TestMultiDict::test_instantiate__from_arg0[pure-python-module-cls0-arg00] PASSED [ 24%]
tests/test_multidict.py::TestMultiDict::test_instantiate__from_arg0[pure-python-module-cls0-arg01] PASSED [ 25%]
tests/test_multidict.py::TestMultiDict::test_instantiate__from_arg0[pure-python-module-cls1-arg00] PASSED [ 25%]
tests/test_multidict.py::TestMultiDict::test_instantiate__from_arg0[pure-python-module-cls1-arg01] PASSED [ 25%]
tests/test_multidict.py::TestMultiDict::test_instantiate__with_kwargs[pure-python-module-cls0] PASSED [ 25%]
tests/test_multidict.py::TestMultiDict::test_instantiate__with_kwargs[pure-python-module-cls1] PASSED [ 25%]
tests/test_multidict.py::TestMultiDict::test_instantiate__from_generator[pure-python-module-cls0] PASSED [ 25%]
tests/test_multidict.py::TestMultiDict::test_instantiate__from_generator[pure-python-module-cls1] PASSED [ 25%]
tests/test_multidict.py::TestMultiDict::test_instantiate__from_list_of_lists[pure-python-module-cls0] PASSED [ 25%]
tests/test_multidict.py::TestMultiDict::test_instantiate__from_list_of_lists[pure-python-module-cls1] PASSED [ 25%]
tests/test_multidict.py::TestMultiDict::test_instantiate__from_list_of_custom_pairs[pure-python-module-cls0] PASSED [ 26%]
tests/test_multidict.py::TestMultiDict::test_instantiate__from_list_of_custom_pairs[pure-python-module-cls1] PASSED [ 26%]
tests/test_multidict.py::TestMultiDict::test_getone[pure-python-module-cls0] PASSED [ 26%]
tests/test_multidict.py::TestMultiDict::test_getone[pure-python-module-cls1] PASSED [ 26%]
tests/test_multidict.py::TestMultiDict::test_call_with_kwargs[pure-python-module-cls0] PASSED [ 26%]
tests/test_multidict.py::TestMultiDict::test_call_with_kwargs[pure-python-module-cls1] PASSED [ 26%]
tests/test_multidict.py::TestMultiDict::test__iter__[pure-python-module-cls0] PASSED [ 26%]
tests/test_multidict.py::TestMultiDict::test__iter__[pure-python-module-cls1] PASSED [ 26%]
tests/test_multidict.py::TestMultiDict::test_keys__contains[pure-python-module-cls0] PASSED [ 26%]
tests/test_multidict.py::TestMultiDict::test_keys__contains[pure-python-module-cls1] PASSED [ 27%]
tests/test_multidict.py::TestMultiDict::test_values__contains[pure-python-module-cls0] PASSED [ 27%]
tests/test_multidict.py::TestMultiDict::test_values__contains[pure-python-module-cls1] PASSED [ 27%]
tests/test_multidict.py::TestMultiDict::test_items__contains[pure-python-module-cls0] PASSED [ 27%]
tests/test_multidict.py::TestMultiDict::test_items__contains[pure-python-module-cls1] PASSED [ 27%]
tests/test_multidict.py::TestMultiDict::test_cannot_create_from_unaccepted[pure-python-module-cls0] PASSED [ 27%]
tests/test_multidict.py::TestMultiDict::test_cannot_create_from_unaccepted[pure-python-module-cls1] PASSED [ 27%]
tests/test_multidict.py::TestMultiDict::test_keys_is_set_less[pure-python-module-cls0] PASSED [ 27%]
tests/test_multidict.py::TestMultiDict::test_keys_is_set_less[pure-python-module-cls1] PASSED [ 27%]
tests/test_multidict.py::TestMultiDict::test_keys_is_set_less_equal[pure-python-module-cls0] PASSED [ 28%]
tests/test_multidict.py::TestMultiDict::test_keys_is_set_less_equal[pure-python-module-cls1] PASSED [ 28%]
tests/test_multidict.py::TestMultiDict::test_keys_is_set_equal[pure-python-module-cls0] PASSED [ 28%]
tests/test_multidict.py::TestMultiDict::test_keys_is_set_equal[pure-python-module-cls1] PASSED [ 28%]
tests/test_multidict.py::TestMultiDict::test_keys_is_set_greater[pure-python-module-cls0] PASSED [ 28%]
tests/test_multidict.py::TestMultiDict::test_keys_is_set_greater[pure-python-module-cls1] PASSED [ 28%]
tests/test_multidict.py::TestMultiDict::test_keys_is_set_greater_equal[pure-python-module-cls0] PASSED [ 28%]
tests/test_multidict.py::TestMultiDict::test_keys_is_set_greater_equal[pure-python-module-cls1] PASSED [ 28%]
tests/test_multidict.py::TestMultiDict::test_keys_is_set_not_equal[pure-python-module-cls0] PASSED [ 28%]
tests/test_multidict.py::TestMultiDict::test_keys_is_set_not_equal[pure-python-module-cls1] PASSED [ 29%]
tests/test_multidict.py::TestMultiDict::test_eq[pure-python-module-cls0] PASSED [ 29%]
tests/test_multidict.py::TestMultiDict::test_eq[pure-python-module-cls1] PASSED [ 29%]
tests/test_multidict.py::TestMultiDict::test_eq2[pure-python-module-cls0] PASSED [ 29%]
tests/test_multidict.py::TestMultiDict::test_eq2[pure-python-module-cls1] PASSED [ 29%]
tests/test_multidict.py::TestMultiDict::test_eq3[pure-python-module-cls0] PASSED [ 29%]
tests/test_multidict.py::TestMultiDict::test_eq3[pure-python-module-cls1] PASSED [ 29%]
tests/test_multidict.py::TestMultiDict::test_eq_other_mapping_contains_more_keys[pure-python-module-cls0] PASSED [ 29%]
tests/test_multidict.py::TestMultiDict::test_eq_other_mapping_contains_more_keys[pure-python-module-cls1] PASSED [ 29%]
tests/test_multidict.py::TestMultiDict::test_eq_bad_mapping_len[pure-python-module-cls0] PASSED [ 30%]
tests/test_multidict.py::TestMultiDict::test_eq_bad_mapping_len[pure-python-module-cls1] PASSED [ 30%]
tests/test_multidict.py::TestMultiDict::test_eq_bad_mapping_getitem[pure-python-module-cls0] PASSED [ 30%]
tests/test_multidict.py::TestMultiDict::test_eq_bad_mapping_getitem[pure-python-module-cls1] PASSED [ 30%]
tests/test_multidict.py::TestMultiDict::test_ne[pure-python-module-cls0] PASSED [ 30%]
tests/test_multidict.py::TestMultiDict::test_ne[pure-python-module-cls1] PASSED [ 30%]
tests/test_multidict.py::TestMultiDict::test_and[pure-python-module-cls0] PASSED [ 30%]
tests/test_multidict.py::TestMultiDict::test_and[pure-python-module-cls1] PASSED [ 30%]
tests/test_multidict.py::TestMultiDict::test_and2[pure-python-module-cls0] PASSED [ 30%]
tests/test_multidict.py::TestMultiDict::test_and2[pure-python-module-cls1] PASSED [ 30%]
tests/test_multidict.py::TestMultiDict::test_bitwise_and_not_implemented[pure-python-module-cls0] PASSED [ 31%]
tests/test_multidict.py::TestMultiDict::test_bitwise_and_not_implemented[pure-python-module-cls1] PASSED [ 31%]
tests/test_multidict.py::TestMultiDict::test_bitwise_and_iterable_not_set[pure-python-module-cls0] PASSED [ 31%]
tests/test_multidict.py::TestMultiDict::test_bitwise_and_iterable_not_set[pure-python-module-cls1] PASSED [ 31%]
tests/test_multidict.py::TestMultiDict::test_or[pure-python-module-cls0] PASSED [ 31%]
tests/test_multidict.py::TestMultiDict::test_or[pure-python-module-cls1] PASSED [ 31%]
tests/test_multidict.py::TestMultiDict::test_or2[pure-python-module-cls0] PASSED [ 31%]
tests/test_multidict.py::TestMultiDict::test_or2[pure-python-module-cls1] PASSED [ 31%]
tests/test_multidict.py::TestMultiDict::test_bitwise_or_not_implemented[pure-python-module-cls0] PASSED [ 31%]
tests/test_multidict.py::TestMultiDict::test_bitwise_or_not_implemented[pure-python-module-cls1] PASSED [ 32%]
tests/test_multidict.py::TestMultiDict::test_bitwise_or_iterable_not_set[pure-python-module-cls0] PASSED [ 32%]
tests/test_multidict.py::TestMultiDict::test_bitwise_or_iterable_not_set[pure-python-module-cls1] PASSED [ 32%]
tests/test_multidict.py::TestMultiDict::test_sub[pure-python-module-cls0] PASSED [ 32%]
tests/test_multidict.py::TestMultiDict::test_sub[pure-python-module-cls1] PASSED [ 32%]
tests/test_multidict.py::TestMultiDict::test_sub2[pure-python-module-cls0] PASSED [ 32%]
tests/test_multidict.py::TestMultiDict::test_sub2[pure-python-module-cls1] PASSED [ 32%]
tests/test_multidict.py::TestMultiDict::test_sub_not_implemented[pure-python-module-cls0] PASSED [ 32%]
tests/test_multidict.py::TestMultiDict::test_sub_not_implemented[pure-python-module-cls1] PASSED [ 32%]
tests/test_multidict.py::TestMultiDict::test_sub_iterable_not_set[pure-python-module-cls0] PASSED [ 33%]
tests/test_multidict.py::TestMultiDict::test_sub_iterable_not_set[pure-python-module-cls1] PASSED [ 33%]
tests/test_multidict.py::TestMultiDict::test_xor[pure-python-module-cls0] PASSED [ 33%]
tests/test_multidict.py::TestMultiDict::test_xor[pure-python-module-cls1] PASSED [ 33%]
tests/test_multidict.py::TestMultiDict::test_xor2[pure-python-module-cls0] PASSED [ 33%]
tests/test_multidict.py::TestMultiDict::test_xor2[pure-python-module-cls1] PASSED [ 33%]
tests/test_multidict.py::TestMultiDict::test_xor_not_implemented[pure-python-module-cls0] PASSED [ 33%]
tests/test_multidict.py::TestMultiDict::test_xor_not_implemented[pure-python-module-cls1] PASSED [ 33%]
tests/test_multidict.py::TestMultiDict::test_xor_iterable_not_set[pure-python-module-cls0] PASSED [ 33%]
tests/test_multidict.py::TestMultiDict::test_xor_iterable_not_set[pure-python-module-cls1] PASSED [ 34%]
tests/test_multidict.py::TestMultiDict::test_isdisjoint[pure-python-module-cls0-key2-v-True] PASSED [ 34%]
tests/test_multidict.py::TestMultiDict::test_isdisjoint[pure-python-module-cls0-key-value1-False] PASSED [ 34%]
tests/test_multidict.py::TestMultiDict::test_isdisjoint[pure-python-module-cls1-key2-v-True] PASSED [ 34%]
tests/test_multidict.py::TestMultiDict::test_isdisjoint[pure-python-module-cls1-key-value1-False] PASSED [ 34%]
tests/test_multidict.py::TestMultiDict::test_repr_aiohttp_issue_410[pure-python-module-cls0] PASSED [ 34%]
tests/test_multidict.py::TestMultiDict::test_repr_aiohttp_issue_410[pure-python-module-cls1] PASSED [ 34%]
tests/test_multidict.py::TestMultiDict::test_op_issue_aiohttp_issue_410[pure-python-module-cls0-other0-or_] PASSED [ 34%]
tests/test_multidict.py::TestMultiDict::test_op_issue_aiohttp_issue_410[pure-python-module-cls0-other0-and_] PASSED [ 34%]
tests/test_multidict.py::TestMultiDict::test_op_issue_aiohttp_issue_410[pure-python-module-cls0-other0-sub] PASSED [ 35%]
tests/test_multidict.py::TestMultiDict::test_op_issue_aiohttp_issue_410[pure-python-module-cls0-other0-xor] PASSED [ 35%]
tests/test_multidict.py::TestMultiDict::test_op_issue_aiohttp_issue_410[pure-python-module-cls1-other0-or_] PASSED [ 35%]
tests/test_multidict.py::TestMultiDict::test_op_issue_aiohttp_issue_410[pure-python-module-cls1-other0-and_] PASSED [ 35%]
tests/test_multidict.py::TestMultiDict::test_op_issue_aiohttp_issue_410[pure-python-module-cls1-other0-sub] PASSED [ 35%]
tests/test_multidict.py::TestMultiDict::test_op_issue_aiohttp_issue_410[pure-python-module-cls1-other0-xor] PASSED [ 35%]
tests/test_multidict.py::TestMultiDict::test_weakref[pure-python-module-cls0] PASSED [ 35%]
tests/test_multidict.py::TestMultiDict::test_weakref[pure-python-module-cls1] PASSED [ 35%]
tests/test_multidict.py::TestMultiDict::test_iter_length_hint_keys[pure-python-module-cls0] PASSED [ 35%]
tests/test_multidict.py::TestMultiDict::test_iter_length_hint_keys[pure-python-module-cls1] PASSED [ 36%]
tests/test_multidict.py::TestMultiDict::test_iter_length_hint_items[pure-python-module-cls0] PASSED [ 36%]
tests/test_multidict.py::TestMultiDict::test_iter_length_hint_items[pure-python-module-cls1] PASSED [ 36%]
tests/test_multidict.py::TestMultiDict::test_iter_length_hint_values[pure-python-module-cls0] PASSED [ 36%]
tests/test_multidict.py::TestMultiDict::test_iter_length_hint_values[pure-python-module-cls1] PASSED [ 36%]
tests/test_multidict.py::TestMultiDict::test_ctor_list_arg_and_kwds[pure-python-module-cls0] PASSED [ 36%]
tests/test_multidict.py::TestMultiDict::test_ctor_list_arg_and_kwds[pure-python-module-cls1] PASSED [ 36%]
tests/test_multidict.py::TestMultiDict::test_ctor_tuple_arg_and_kwds[pure-python-module-cls0] PASSED [ 36%]
tests/test_multidict.py::TestMultiDict::test_ctor_tuple_arg_and_kwds[pure-python-module-cls1] PASSED [ 36%]
tests/test_multidict.py::TestMultiDict::test_ctor_deque_arg_and_kwds[pure-python-module-cls0] PASSED [ 37%]
tests/test_multidict.py::TestMultiDict::test_ctor_deque_arg_and_kwds[pure-python-module-cls1] PASSED [ 37%]
tests/test_multidict.py::TestMultiDict::test__repr__[pure-python-module-cls0] PASSED [ 37%]
tests/test_multidict.py::TestMultiDict::test__repr__[pure-python-module-cls1] PASSED [ 37%]
tests/test_multidict.py::TestMultiDict::test_getall[pure-python-module-cls0] PASSED [ 37%]
tests/test_multidict.py::TestMultiDict::test_getall[pure-python-module-cls1] PASSED [ 37%]
tests/test_multidict.py::TestMultiDict::test_preserve_stable_ordering[pure-python-module-cls0] PASSED [ 37%]
tests/test_multidict.py::TestMultiDict::test_preserve_stable_ordering[pure-python-module-cls1] PASSED [ 37%]
tests/test_multidict.py::TestMultiDict::test_get[pure-python-module-cls0] PASSED [ 37%]
tests/test_multidict.py::TestMultiDict::test_get[pure-python-module-cls1] PASSED [ 38%]
tests/test_multidict.py::TestMultiDict::test_items__repr__[pure-python-module-cls0] PASSED [ 38%]
tests/test_multidict.py::TestMultiDict::test_items__repr__[pure-python-module-cls1] PASSED [ 38%]
tests/test_multidict.py::TestMultiDict::test_keys__repr__[pure-python-module-cls0] PASSED [ 38%]
tests/test_multidict.py::TestMultiDict::test_keys__repr__[pure-python-module-cls1] PASSED [ 38%]
tests/test_multidict.py::TestMultiDict::test_values__repr__[pure-python-module-cls0] PASSED [ 38%]
tests/test_multidict.py::TestMultiDict::test_values__repr__[pure-python-module-cls1] PASSED [ 38%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__empty[pure-python-module-cls0] PASSED [ 38%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__empty[pure-python-module-cls1] PASSED [ 38%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__from_arg0[pure-python-module-cls0-arg00] PASSED [ 38%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__from_arg0[pure-python-module-cls0-arg01] PASSED [ 39%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__from_arg0[pure-python-module-cls1-arg00] PASSED [ 39%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__from_arg0[pure-python-module-cls1-arg01] PASSED [ 39%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__with_kwargs[pure-python-module-cls0] PASSED [ 39%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__with_kwargs[pure-python-module-cls1] PASSED [ 39%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__from_generator[pure-python-module-cls0] PASSED [ 39%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__from_generator[pure-python-module-cls1] PASSED [ 39%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__from_list_of_lists[pure-python-module-cls0] PASSED [ 39%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__from_list_of_lists[pure-python-module-cls1] PASSED [ 39%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__from_list_of_custom_pairs[pure-python-module-cls0] PASSED [ 40%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__from_list_of_custom_pairs[pure-python-module-cls1] PASSED [ 40%]
tests/test_multidict.py::TestCIMultiDict::test_getone[pure-python-module-cls0] PASSED [ 40%]
tests/test_multidict.py::TestCIMultiDict::test_getone[pure-python-module-cls1] PASSED [ 40%]
tests/test_multidict.py::TestCIMultiDict::test_call_with_kwargs[pure-python-module-cls0] PASSED [ 40%]
tests/test_multidict.py::TestCIMultiDict::test_call_with_kwargs[pure-python-module-cls1] PASSED [ 40%]
tests/test_multidict.py::TestCIMultiDict::test__iter__[pure-python-module-cls0] PASSED [ 40%]
tests/test_multidict.py::TestCIMultiDict::test__iter__[pure-python-module-cls1] PASSED [ 40%]
tests/test_multidict.py::TestCIMultiDict::test_keys__contains[pure-python-module-cls0] PASSED [ 40%]
tests/test_multidict.py::TestCIMultiDict::test_keys__contains[pure-python-module-cls1] PASSED [ 41%]
tests/test_multidict.py::TestCIMultiDict::test_values__contains[pure-python-module-cls0] PASSED [ 41%]
tests/test_multidict.py::TestCIMultiDict::test_values__contains[pure-python-module-cls1] PASSED [ 41%]
tests/test_multidict.py::TestCIMultiDict::test_items__contains[pure-python-module-cls0] PASSED [ 41%]
tests/test_multidict.py::TestCIMultiDict::test_items__contains[pure-python-module-cls1] PASSED [ 41%]
tests/test_multidict.py::TestCIMultiDict::test_cannot_create_from_unaccepted[pure-python-module-cls0] PASSED [ 41%]
tests/test_multidict.py::TestCIMultiDict::test_cannot_create_from_unaccepted[pure-python-module-cls1] PASSED [ 41%]
tests/test_multidict.py::TestCIMultiDict::test_keys_is_set_less[pure-python-module-cls0] PASSED [ 41%]
tests/test_multidict.py::TestCIMultiDict::test_keys_is_set_less[pure-python-module-cls1] PASSED [ 41%]
tests/test_multidict.py::TestCIMultiDict::test_keys_is_set_less_equal[pure-python-module-cls0] PASSED [ 42%]
tests/test_multidict.py::TestCIMultiDict::test_keys_is_set_less_equal[pure-python-module-cls1] PASSED [ 42%]
tests/test_multidict.py::TestCIMultiDict::test_keys_is_set_equal[pure-python-module-cls0] PASSED [ 42%]
tests/test_multidict.py::TestCIMultiDict::test_keys_is_set_equal[pure-python-module-cls1] PASSED [ 42%]
tests/test_multidict.py::TestCIMultiDict::test_keys_is_set_greater[pure-python-module-cls0] PASSED [ 42%]
tests/test_multidict.py::TestCIMultiDict::test_keys_is_set_greater[pure-python-module-cls1] PASSED [ 42%]
tests/test_multidict.py::TestCIMultiDict::test_keys_is_set_greater_equal[pure-python-module-cls0] PASSED [ 42%]
tests/test_multidict.py::TestCIMultiDict::test_keys_is_set_greater_equal[pure-python-module-cls1] PASSED [ 42%]
tests/test_multidict.py::TestCIMultiDict::test_keys_is_set_not_equal[pure-python-module-cls0] PASSED [ 42%]
tests/test_multidict.py::TestCIMultiDict::test_keys_is_set_not_equal[pure-python-module-cls1] PASSED [ 43%]
tests/test_multidict.py::TestCIMultiDict::test_eq[pure-python-module-cls0] PASSED [ 43%]
tests/test_multidict.py::TestCIMultiDict::test_eq[pure-python-module-cls1] PASSED [ 43%]
tests/test_multidict.py::TestCIMultiDict::test_eq2[pure-python-module-cls0] PASSED [ 43%]
tests/test_multidict.py::TestCIMultiDict::test_eq2[pure-python-module-cls1] PASSED [ 43%]
tests/test_multidict.py::TestCIMultiDict::test_eq3[pure-python-module-cls0] PASSED [ 43%]
tests/test_multidict.py::TestCIMultiDict::test_eq3[pure-python-module-cls1] PASSED [ 43%]
tests/test_multidict.py::TestCIMultiDict::test_eq_other_mapping_contains_more_keys[pure-python-module-cls0] PASSED [ 43%]
tests/test_multidict.py::TestCIMultiDict::test_eq_other_mapping_contains_more_keys[pure-python-module-cls1] PASSED [ 43%]
tests/test_multidict.py::TestCIMultiDict::test_eq_bad_mapping_len[pure-python-module-cls0] PASSED [ 44%]
tests/test_multidict.py::TestCIMultiDict::test_eq_bad_mapping_len[pure-python-module-cls1] PASSED [ 44%]
tests/test_multidict.py::TestCIMultiDict::test_eq_bad_mapping_getitem[pure-python-module-cls0] PASSED [ 44%]
tests/test_multidict.py::TestCIMultiDict::test_eq_bad_mapping_getitem[pure-python-module-cls1] PASSED [ 44%]
tests/test_multidict.py::TestCIMultiDict::test_ne[pure-python-module-cls0] PASSED [ 44%]
tests/test_multidict.py::TestCIMultiDict::test_ne[pure-python-module-cls1] PASSED [ 44%]
tests/test_multidict.py::TestCIMultiDict::test_and[pure-python-module-cls0] PASSED [ 44%]
tests/test_multidict.py::TestCIMultiDict::test_and[pure-python-module-cls1] PASSED [ 44%]
tests/test_multidict.py::TestCIMultiDict::test_and2[pure-python-module-cls0] PASSED [ 44%]
tests/test_multidict.py::TestCIMultiDict::test_and2[pure-python-module-cls1] PASSED [ 45%]
tests/test_multidict.py::TestCIMultiDict::test_bitwise_and_not_implemented[pure-python-module-cls0] PASSED [ 45%]
tests/test_multidict.py::TestCIMultiDict::test_bitwise_and_not_implemented[pure-python-module-cls1] PASSED [ 45%]
tests/test_multidict.py::TestCIMultiDict::test_bitwise_and_iterable_not_set[pure-python-module-cls0] PASSED [ 45%]
tests/test_multidict.py::TestCIMultiDict::test_bitwise_and_iterable_not_set[pure-python-module-cls1] PASSED [ 45%]
tests/test_multidict.py::TestCIMultiDict::test_or[pure-python-module-cls0] PASSED [ 45%]
tests/test_multidict.py::TestCIMultiDict::test_or[pure-python-module-cls1] PASSED [ 45%]
tests/test_multidict.py::TestCIMultiDict::test_or2[pure-python-module-cls0] PASSED [ 45%]
tests/test_multidict.py::TestCIMultiDict::test_or2[pure-python-module-cls1] PASSED [ 45%]
tests/test_multidict.py::TestCIMultiDict::test_bitwise_or_not_implemented[pure-python-module-cls0] PASSED [ 46%]
tests/test_multidict.py::TestCIMultiDict::test_bitwise_or_not_implemented[pure-python-module-cls1] PASSED [ 46%]
tests/test_multidict.py::TestCIMultiDict::test_bitwise_or_iterable_not_set[pure-python-module-cls0] PASSED [ 46%]
tests/test_multidict.py::TestCIMultiDict::test_bitwise_or_iterable_not_set[pure-python-module-cls1] PASSED [ 46%]
tests/test_multidict.py::TestCIMultiDict::test_sub[pure-python-module-cls0] PASSED [ 46%]
tests/test_multidict.py::TestCIMultiDict::test_sub[pure-python-module-cls1] PASSED [ 46%]
tests/test_multidict.py::TestCIMultiDict::test_sub2[pure-python-module-cls0] PASSED [ 46%]
tests/test_multidict.py::TestCIMultiDict::test_sub2[pure-python-module-cls1] PASSED [ 46%]
tests/test_multidict.py::TestCIMultiDict::test_sub_not_implemented[pure-python-module-cls0] PASSED [ 46%]
tests/test_multidict.py::TestCIMultiDict::test_sub_not_implemented[pure-python-module-cls1] PASSED [ 46%]
tests/test_multidict.py::TestCIMultiDict::test_sub_iterable_not_set[pure-python-module-cls0] PASSED [ 47%]
tests/test_multidict.py::TestCIMultiDict::test_sub_iterable_not_set[pure-python-module-cls1] PASSED [ 47%]
tests/test_multidict.py::TestCIMultiDict::test_xor[pure-python-module-cls0] PASSED [ 47%]
tests/test_multidict.py::TestCIMultiDict::test_xor[pure-python-module-cls1] PASSED [ 47%]
tests/test_multidict.py::TestCIMultiDict::test_xor2[pure-python-module-cls0] PASSED [ 47%]
tests/test_multidict.py::TestCIMultiDict::test_xor2[pure-python-module-cls1] PASSED [ 47%]
tests/test_multidict.py::TestCIMultiDict::test_xor_not_implemented[pure-python-module-cls0] PASSED [ 47%]
tests/test_multidict.py::TestCIMultiDict::test_xor_not_implemented[pure-python-module-cls1] PASSED [ 47%]
tests/test_multidict.py::TestCIMultiDict::test_xor_iterable_not_set[pure-python-module-cls0] PASSED [ 47%]
tests/test_multidict.py::TestCIMultiDict::test_xor_iterable_not_set[pure-python-module-cls1] PASSED [ 48%]
tests/test_multidict.py::TestCIMultiDict::test_isdisjoint[pure-python-module-cls0-key2-v-True] PASSED [ 48%]
tests/test_multidict.py::TestCIMultiDict::test_isdisjoint[pure-python-module-cls0-key-value1-False] PASSED [ 48%]
tests/test_multidict.py::TestCIMultiDict::test_isdisjoint[pure-python-module-cls1-key2-v-True] PASSED [ 48%]
tests/test_multidict.py::TestCIMultiDict::test_isdisjoint[pure-python-module-cls1-key-value1-False] PASSED [ 48%]
tests/test_multidict.py::TestCIMultiDict::test_repr_aiohttp_issue_410[pure-python-module-cls0] PASSED [ 48%]
tests/test_multidict.py::TestCIMultiDict::test_repr_aiohttp_issue_410[pure-python-module-cls1] PASSED [ 48%]
tests/test_multidict.py::TestCIMultiDict::test_op_issue_aiohttp_issue_410[pure-python-module-cls0-other0-or_] PASSED [ 48%]
tests/test_multidict.py::TestCIMultiDict::test_op_issue_aiohttp_issue_410[pure-python-module-cls0-other0-and_] PASSED [ 48%]
tests/test_multidict.py::TestCIMultiDict::test_op_issue_aiohttp_issue_410[pure-python-module-cls0-other0-sub] PASSED [ 49%]
tests/test_multidict.py::TestCIMultiDict::test_op_issue_aiohttp_issue_410[pure-python-module-cls0-other0-xor] PASSED [ 49%]
tests/test_multidict.py::TestCIMultiDict::test_op_issue_aiohttp_issue_410[pure-python-module-cls1-other0-or_] PASSED [ 49%]
tests/test_multidict.py::TestCIMultiDict::test_op_issue_aiohttp_issue_410[pure-python-module-cls1-other0-and_] PASSED [ 49%]
tests/test_multidict.py::TestCIMultiDict::test_op_issue_aiohttp_issue_410[pure-python-module-cls1-other0-sub] PASSED [ 49%]
tests/test_multidict.py::TestCIMultiDict::test_op_issue_aiohttp_issue_410[pure-python-module-cls1-other0-xor] PASSED [ 49%]
tests/test_multidict.py::TestCIMultiDict::test_weakref[pure-python-module-cls0] PASSED [ 49%]
tests/test_multidict.py::TestCIMultiDict::test_weakref[pure-python-module-cls1] PASSED [ 49%]
tests/test_multidict.py::TestCIMultiDict::test_iter_length_hint_keys[pure-python-module-cls0] PASSED [ 49%]
tests/test_multidict.py::TestCIMultiDict::test_iter_length_hint_keys[pure-python-module-cls1] PASSED [ 50%]
tests/test_multidict.py::TestCIMultiDict::test_iter_length_hint_items[pure-python-module-cls0] PASSED [ 50%]
tests/test_multidict.py::TestCIMultiDict::test_iter_length_hint_items[pure-python-module-cls1] PASSED [ 50%]
tests/test_multidict.py::TestCIMultiDict::test_iter_length_hint_values[pure-python-module-cls0] PASSED [ 50%]
tests/test_multidict.py::TestCIMultiDict::test_iter_length_hint_values[pure-python-module-cls1] PASSED [ 50%]
tests/test_multidict.py::TestCIMultiDict::test_ctor_list_arg_and_kwds[pure-python-module-cls0] PASSED [ 50%]
tests/test_multidict.py::TestCIMultiDict::test_ctor_list_arg_and_kwds[pure-python-module-cls1] PASSED [ 50%]
tests/test_multidict.py::TestCIMultiDict::test_ctor_tuple_arg_and_kwds[pure-python-module-cls0] PASSED [ 50%]
tests/test_multidict.py::TestCIMultiDict::test_ctor_tuple_arg_and_kwds[pure-python-module-cls1] PASSED [ 50%]
tests/test_multidict.py::TestCIMultiDict::test_ctor_deque_arg_and_kwds[pure-python-module-cls0] PASSED [ 51%]
tests/test_multidict.py::TestCIMultiDict::test_ctor_deque_arg_and_kwds[pure-python-module-cls1] PASSED [ 51%]
tests/test_multidict.py::TestCIMultiDict::test_basics[pure-python-module-cls0] PASSED [ 51%]
tests/test_multidict.py::TestCIMultiDict::test_basics[pure-python-module-cls1] PASSED [ 51%]
tests/test_multidict.py::TestCIMultiDict::test_getall[pure-python-module-cls0] PASSED [ 51%]
tests/test_multidict.py::TestCIMultiDict::test_getall[pure-python-module-cls1] PASSED [ 51%]
tests/test_multidict.py::TestCIMultiDict::test_get[pure-python-module-cls0] PASSED [ 51%]
tests/test_multidict.py::TestCIMultiDict::test_get[pure-python-module-cls1] PASSED [ 51%]
tests/test_multidict.py::TestCIMultiDict::test__repr__[pure-python-module-cls0] PASSED [ 51%]
tests/test_multidict.py::TestCIMultiDict::test__repr__[pure-python-module-cls1] PASSED [ 52%]
tests/test_multidict.py::TestCIMultiDict::test_items__repr__[pure-python-module-cls0] PASSED [ 52%]
tests/test_multidict.py::TestCIMultiDict::test_items__repr__[pure-python-module-cls1] PASSED [ 52%]
tests/test_multidict.py::TestCIMultiDict::test_keys__repr__[pure-python-module-cls0] PASSED [ 52%]
tests/test_multidict.py::TestCIMultiDict::test_keys__repr__[pure-python-module-cls1] PASSED [ 52%]
tests/test_multidict.py::TestCIMultiDict::test_values__repr__[pure-python-module-cls0] PASSED [ 52%]
tests/test_multidict.py::TestCIMultiDict::test_values__repr__[pure-python-module-cls1] PASSED [ 52%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_copy[pure-python-module] PASSED [ 52%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test__repr__[pure-python-module] PASSED [ 52%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_getall[pure-python-module] PASSED [ 53%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_add[pure-python-module] PASSED [ 53%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_extend[pure-python-module] PASSED [ 53%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_extend_from_proxy[pure-python-module] PASSED [ 53%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_clear[pure-python-module] PASSED [ 53%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_del[pure-python-module] PASSED [ 53%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_set_default[pure-python-module] PASSED [ 53%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_popitem[pure-python-module] PASSED [ 53%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_popitem_empty_multidict[pure-python-module] PASSED [ 53%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_pop[pure-python-module] PASSED [ 53%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_pop2[pure-python-module] PASSED [ 54%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_pop_default[pure-python-module] PASSED [ 54%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_pop_raises[pure-python-module] PASSED [ 54%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_replacement_order[pure-python-module] PASSED [ 54%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_nonstr_key[pure-python-module] PASSED [ 54%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_istr_key[pure-python-module] PASSED [ 54%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_str_derived_key[pure-python-module] PASSED [ 54%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_istr_key_add[pure-python-module] PASSED [ 54%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_str_derived_key_add[pure-python-module] PASSED [ 54%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_popall[pure-python-module] PASSED [ 55%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_popall_default[pure-python-module] PASSED [ 55%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_popall_key_error[pure-python-module] PASSED [ 55%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_large_multidict_resizing[pure-python-module] PASSED [ 55%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_getall[pure-python-module] PASSED [ 55%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_ctor[pure-python-module] PASSED [ 55%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_setitem[pure-python-module] PASSED [ 55%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_delitem[pure-python-module] PASSED [ 55%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_copy[pure-python-module] PASSED [ 55%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test__repr__[pure-python-module] PASSED [ 56%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_add[pure-python-module] PASSED [ 56%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_extend[pure-python-module] PASSED [ 56%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_extend_from_proxy[pure-python-module] PASSED [ 56%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_clear[pure-python-module] PASSED [ 56%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_del[pure-python-module] PASSED [ 56%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_set_default[pure-python-module] PASSED [ 56%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_popitem[pure-python-module] PASSED [ 56%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_popitem_empty_multidict[pure-python-module] PASSED [ 56%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_pop[pure-python-module] PASSED [ 57%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_pop_lowercase[pure-python-module] PASSED [ 57%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_pop_default[pure-python-module] PASSED [ 57%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_pop_raises[pure-python-module] PASSED [ 57%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_extend_with_istr[pure-python-module] PASSED [ 57%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_copy_istr[pure-python-module] PASSED [ 57%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_eq[pure-python-module] PASSED [ 57%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_sizeof[pure-python-module] PASSED [ 57%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_min_sizeof[pure-python-module] PASSED [ 57%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_issue_620_items[pure-python-module] PASSED [ 58%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_issue_620_keys[pure-python-module] PASSED [ 58%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_issue_620_values[pure-python-module] PASSED [ 58%]
tests/test_types.py::test_proxies[pure-python-module] PASSED             [ 58%]
tests/test_types.py::test_dicts[pure-python-module] PASSED               [ 58%]
tests/test_types.py::test_proxy_not_inherited_from_dict[pure-python-module] PASSED [ 58%]
tests/test_types.py::test_dict_not_inherited_from_proxy[pure-python-module] PASSED [ 58%]
tests/test_types.py::test_multidict_proxy_copy_type[pure-python-module] PASSED [ 58%]
tests/test_types.py::test_cimultidict_proxy_copy_type[pure-python-module] PASSED [ 58%]
tests/test_types.py::test_create_multidict_proxy_from_nonmultidict[pure-python-module] PASSED [ 59%]
tests/test_types.py::test_create_multidict_proxy_from_cimultidict[pure-python-module] PASSED [ 59%]
tests/test_types.py::test_create_multidict_proxy_from_multidict_proxy_from_mdict[pure-python-module] PASSED [ 59%]
tests/test_types.py::test_create_cimultidict_proxy_from_cimultidict_proxy_from_ci[pure-python-module] PASSED [ 59%]
tests/test_types.py::test_create_cimultidict_proxy_from_nonmultidict[pure-python-module] PASSED [ 59%]
tests/test_types.py::test_create_ci_multidict_proxy_from_multidict[pure-python-module] PASSED [ 59%]
tests/test_types.py::test_generic_exists[pure-python-module] SKIPPED     [ 59%]
tests/test_types.py::test_generic_alias[pure-python-module] PASSED       [ 59%]
tests/test_update.py::test_update_md[pure-python-module] PASSED          [ 59%]
tests/test_update.py::test_update_istr_ci_md[pure-python-module] PASSED  [ 60%]
tests/test_update.py::test_update_ci_md[pure-python-module] PASSED       [ 60%]
tests/test_version.py::test_getversion_bad_param[pure-python-module] PASSED [ 60%]
tests/test_multidict.py::test_exposed_names[case-sensitive] PASSED       [ 60%]
tests/test_guard.py::test_guard_items[c-extension-module] ERROR          [ 60%]
tests/test_guard.py::test_guard_keys[c-extension-module] ERROR           [ 60%]
tests/test_guard.py::test_guard_values[c-extension-module] ERROR         [ 60%]
tests/test_istr.py::test_ctor[c-extension-module] ERROR                  [ 60%]
tests/test_istr.py::test_ctor_str[c-extension-module] ERROR              [ 60%]
tests/test_istr.py::test_ctor_istr[c-extension-module] ERROR             [ 61%]
tests/test_istr.py::test_ctor_buffer[c-extension-module] ERROR           [ 61%]
tests/test_istr.py::test_ctor_repr[c-extension-module] ERROR             [ 61%]
tests/test_istr.py::test_str[c-extension-module] ERROR                   [ 61%]
tests/test_istr.py::test_eq[c-extension-module] ERROR                    [ 61%]
tests/test_istr.py::test_leak[c-extension-module] ERROR                  [ 61%]
tests/test_multidict.py::test__iter__types[c-extension-module-cls0-str] ERROR [ 61%]
tests/test_multidict.py::test__iter__types[c-extension-module-cls1-str] ERROR [ 61%]
tests/test_multidict.py::TestMultiDict::test_instantiate__empty[c-extension-module-cls0] ERROR [ 61%]
tests/test_multidict.py::TestMultiDict::test_instantiate__empty[c-extension-module-cls1] ERROR [ 61%]
tests/test_multidict.py::TestMultiDict::test_instantiate__from_arg0[c-extension-module-cls0-arg00] ERROR [ 62%]
tests/test_multidict.py::TestMultiDict::test_instantiate__from_arg0[c-extension-module-cls0-arg01] ERROR [ 62%]
tests/test_multidict.py::TestMultiDict::test_instantiate__from_arg0[c-extension-module-cls1-arg00] ERROR [ 62%]
tests/test_multidict.py::TestMultiDict::test_instantiate__from_arg0[c-extension-module-cls1-arg01] ERROR [ 62%]
tests/test_multidict.py::TestMultiDict::test_instantiate__with_kwargs[c-extension-module-cls0] ERROR [ 62%]
tests/test_multidict.py::TestMultiDict::test_instantiate__with_kwargs[c-extension-module-cls1] ERROR [ 62%]
tests/test_multidict.py::TestMultiDict::test_instantiate__from_generator[c-extension-module-cls0] ERROR [ 62%]
tests/test_multidict.py::TestMultiDict::test_instantiate__from_generator[c-extension-module-cls1] ERROR [ 62%]
tests/test_multidict.py::TestMultiDict::test_instantiate__from_list_of_lists[c-extension-module-cls0] ERROR [ 62%]
tests/test_multidict.py::TestMultiDict::test_instantiate__from_list_of_lists[c-extension-module-cls1] ERROR [ 63%]
tests/test_multidict.py::TestMultiDict::test_instantiate__from_list_of_custom_pairs[c-extension-module-cls0] ERROR [ 63%]
tests/test_multidict.py::TestMultiDict::test_instantiate__from_list_of_custom_pairs[c-extension-module-cls1] ERROR [ 63%]
tests/test_multidict.py::TestMultiDict::test_getone[c-extension-module-cls0] ERROR [ 63%]
tests/test_multidict.py::TestMultiDict::test_getone[c-extension-module-cls1] ERROR [ 63%]
tests/test_multidict.py::TestMultiDict::test_call_with_kwargs[c-extension-module-cls0] ERROR [ 63%]
tests/test_multidict.py::TestMultiDict::test_call_with_kwargs[c-extension-module-cls1] ERROR [ 63%]
tests/test_multidict.py::TestMultiDict::test__iter__[c-extension-module-cls0] ERROR [ 63%]
tests/test_multidict.py::TestMultiDict::test__iter__[c-extension-module-cls1] ERROR [ 63%]
tests/test_multidict.py::TestMultiDict::test_keys__contains[c-extension-module-cls0] ERROR [ 64%]
tests/test_multidict.py::TestMultiDict::test_keys__contains[c-extension-module-cls1] ERROR [ 64%]
tests/test_multidict.py::TestMultiDict::test_values__contains[c-extension-module-cls0] ERROR [ 64%]
tests/test_multidict.py::TestMultiDict::test_values__contains[c-extension-module-cls1] ERROR [ 64%]
tests/test_multidict.py::TestMultiDict::test_items__contains[c-extension-module-cls0] ERROR [ 64%]
tests/test_multidict.py::TestMultiDict::test_items__contains[c-extension-module-cls1] ERROR [ 64%]
tests/test_multidict.py::TestMultiDict::test_cannot_create_from_unaccepted[c-extension-module-cls0] ERROR [ 64%]
tests/test_multidict.py::TestMultiDict::test_cannot_create_from_unaccepted[c-extension-module-cls1] ERROR [ 64%]
tests/test_multidict.py::TestMultiDict::test_keys_is_set_less[c-extension-module-cls0] ERROR [ 64%]
tests/test_multidict.py::TestMultiDict::test_keys_is_set_less[c-extension-module-cls1] ERROR [ 65%]
tests/test_multidict.py::TestMultiDict::test_keys_is_set_less_equal[c-extension-module-cls0] ERROR [ 65%]
tests/test_multidict.py::TestMultiDict::test_keys_is_set_less_equal[c-extension-module-cls1] ERROR [ 65%]
tests/test_multidict.py::TestMultiDict::test_keys_is_set_equal[c-extension-module-cls0] ERROR [ 65%]
tests/test_multidict.py::TestMultiDict::test_keys_is_set_equal[c-extension-module-cls1] ERROR [ 65%]
tests/test_multidict.py::TestMultiDict::test_keys_is_set_greater[c-extension-module-cls0] ERROR [ 65%]
tests/test_multidict.py::TestMultiDict::test_keys_is_set_greater[c-extension-module-cls1] ERROR [ 65%]
tests/test_multidict.py::TestMultiDict::test_keys_is_set_greater_equal[c-extension-module-cls0] ERROR [ 65%]
tests/test_multidict.py::TestMultiDict::test_keys_is_set_greater_equal[c-extension-module-cls1] ERROR [ 65%]
tests/test_multidict.py::TestMultiDict::test_keys_is_set_not_equal[c-extension-module-cls0] ERROR [ 66%]
tests/test_multidict.py::TestMultiDict::test_keys_is_set_not_equal[c-extension-module-cls1] ERROR [ 66%]
tests/test_multidict.py::TestMultiDict::test_eq[c-extension-module-cls0] ERROR [ 66%]
tests/test_multidict.py::TestMultiDict::test_eq[c-extension-module-cls1] ERROR [ 66%]
tests/test_multidict.py::TestMultiDict::test_eq2[c-extension-module-cls0] ERROR [ 66%]
tests/test_multidict.py::TestMultiDict::test_eq2[c-extension-module-cls1] ERROR [ 66%]
tests/test_multidict.py::TestMultiDict::test_eq3[c-extension-module-cls0] ERROR [ 66%]
tests/test_multidict.py::TestMultiDict::test_eq3[c-extension-module-cls1] ERROR [ 66%]
tests/test_multidict.py::TestMultiDict::test_eq_other_mapping_contains_more_keys[c-extension-module-cls0] ERROR [ 66%]
tests/test_multidict.py::TestMultiDict::test_eq_other_mapping_contains_more_keys[c-extension-module-cls1] ERROR [ 67%]
tests/test_multidict.py::TestMultiDict::test_eq_bad_mapping_len[c-extension-module-cls0] ERROR [ 67%]
tests/test_multidict.py::TestMultiDict::test_eq_bad_mapping_len[c-extension-module-cls1] ERROR [ 67%]
tests/test_multidict.py::TestMultiDict::test_eq_bad_mapping_getitem[c-extension-module-cls0] ERROR [ 67%]
tests/test_multidict.py::TestMultiDict::test_eq_bad_mapping_getitem[c-extension-module-cls1] ERROR [ 67%]
tests/test_multidict.py::TestMultiDict::test_ne[c-extension-module-cls0] ERROR [ 67%]
tests/test_multidict.py::TestMultiDict::test_ne[c-extension-module-cls1] ERROR [ 67%]
tests/test_multidict.py::TestMultiDict::test_and[c-extension-module-cls0] ERROR [ 67%]
tests/test_multidict.py::TestMultiDict::test_and[c-extension-module-cls1] ERROR [ 67%]
tests/test_multidict.py::TestMultiDict::test_and2[c-extension-module-cls0] ERROR [ 68%]
tests/test_multidict.py::TestMultiDict::test_and2[c-extension-module-cls1] ERROR [ 68%]
tests/test_multidict.py::TestMultiDict::test_bitwise_and_not_implemented[c-extension-module-cls0] ERROR [ 68%]
tests/test_multidict.py::TestMultiDict::test_bitwise_and_not_implemented[c-extension-module-cls1] ERROR [ 68%]
tests/test_multidict.py::TestMultiDict::test_bitwise_and_iterable_not_set[c-extension-module-cls0] ERROR [ 68%]
tests/test_multidict.py::TestMultiDict::test_bitwise_and_iterable_not_set[c-extension-module-cls1] ERROR [ 68%]
tests/test_multidict.py::TestMultiDict::test_or[c-extension-module-cls0] ERROR [ 68%]
tests/test_multidict.py::TestMultiDict::test_or[c-extension-module-cls1] ERROR [ 68%]
tests/test_multidict.py::TestMultiDict::test_or2[c-extension-module-cls0] ERROR [ 68%]
tests/test_multidict.py::TestMultiDict::test_or2[c-extension-module-cls1] ERROR [ 69%]
tests/test_multidict.py::TestMultiDict::test_bitwise_or_not_implemented[c-extension-module-cls0] ERROR [ 69%]
tests/test_multidict.py::TestMultiDict::test_bitwise_or_not_implemented[c-extension-module-cls1] ERROR [ 69%]
tests/test_multidict.py::TestMultiDict::test_bitwise_or_iterable_not_set[c-extension-module-cls0] ERROR [ 69%]
tests/test_multidict.py::TestMultiDict::test_bitwise_or_iterable_not_set[c-extension-module-cls1] ERROR [ 69%]
tests/test_multidict.py::TestMultiDict::test_sub[c-extension-module-cls0] ERROR [ 69%]
tests/test_multidict.py::TestMultiDict::test_sub[c-extension-module-cls1] ERROR [ 69%]
tests/test_multidict.py::TestMultiDict::test_sub2[c-extension-module-cls0] ERROR [ 69%]
tests/test_multidict.py::TestMultiDict::test_sub2[c-extension-module-cls1] ERROR [ 69%]
tests/test_multidict.py::TestMultiDict::test_sub_not_implemented[c-extension-module-cls0] ERROR [ 69%]
tests/test_multidict.py::TestMultiDict::test_sub_not_implemented[c-extension-module-cls1] ERROR [ 70%]
tests/test_multidict.py::TestMultiDict::test_sub_iterable_not_set[c-extension-module-cls0] ERROR [ 70%]
tests/test_multidict.py::TestMultiDict::test_sub_iterable_not_set[c-extension-module-cls1] ERROR [ 70%]
tests/test_multidict.py::TestMultiDict::test_xor[c-extension-module-cls0] ERROR [ 70%]
tests/test_multidict.py::TestMultiDict::test_xor[c-extension-module-cls1] ERROR [ 70%]
tests/test_multidict.py::TestMultiDict::test_xor2[c-extension-module-cls0] ERROR [ 70%]
tests/test_multidict.py::TestMultiDict::test_xor2[c-extension-module-cls1] ERROR [ 70%]
tests/test_multidict.py::TestMultiDict::test_xor_not_implemented[c-extension-module-cls0] ERROR [ 70%]
tests/test_multidict.py::TestMultiDict::test_xor_not_implemented[c-extension-module-cls1] ERROR [ 70%]
tests/test_multidict.py::TestMultiDict::test_xor_iterable_not_set[c-extension-module-cls0] ERROR [ 71%]
tests/test_multidict.py::TestMultiDict::test_xor_iterable_not_set[c-extension-module-cls1] ERROR [ 71%]
tests/test_multidict.py::TestMultiDict::test_isdisjoint[c-extension-module-cls0-key2-v-True] ERROR [ 71%]
tests/test_multidict.py::TestMultiDict::test_isdisjoint[c-extension-module-cls0-key-value1-False] ERROR [ 71%]
tests/test_multidict.py::TestMultiDict::test_isdisjoint[c-extension-module-cls1-key2-v-True] ERROR [ 71%]
tests/test_multidict.py::TestMultiDict::test_isdisjoint[c-extension-module-cls1-key-value1-False] ERROR [ 71%]
tests/test_multidict.py::TestMultiDict::test_repr_aiohttp_issue_410[c-extension-module-cls0] ERROR [ 71%]
tests/test_multidict.py::TestMultiDict::test_repr_aiohttp_issue_410[c-extension-module-cls1] ERROR [ 71%]
tests/test_multidict.py::TestMultiDict::test_op_issue_aiohttp_issue_410[c-extension-module-cls0-other0-or_] ERROR [ 71%]
tests/test_multidict.py::TestMultiDict::test_op_issue_aiohttp_issue_410[c-extension-module-cls0-other0-and_] ERROR [ 72%]
tests/test_multidict.py::TestMultiDict::test_op_issue_aiohttp_issue_410[c-extension-module-cls0-other0-sub] ERROR [ 72%]
tests/test_multidict.py::TestMultiDict::test_op_issue_aiohttp_issue_410[c-extension-module-cls0-other0-xor] ERROR [ 72%]
tests/test_multidict.py::TestMultiDict::test_op_issue_aiohttp_issue_410[c-extension-module-cls1-other0-or_] ERROR [ 72%]
tests/test_multidict.py::TestMultiDict::test_op_issue_aiohttp_issue_410[c-extension-module-cls1-other0-and_] ERROR [ 72%]
tests/test_multidict.py::TestMultiDict::test_op_issue_aiohttp_issue_410[c-extension-module-cls1-other0-sub] ERROR [ 72%]
tests/test_multidict.py::TestMultiDict::test_op_issue_aiohttp_issue_410[c-extension-module-cls1-other0-xor] ERROR [ 72%]
tests/test_multidict.py::TestMultiDict::test_weakref[c-extension-module-cls0] ERROR [ 72%]
tests/test_multidict.py::TestMultiDict::test_weakref[c-extension-module-cls1] ERROR [ 72%]
tests/test_multidict.py::TestMultiDict::test_iter_length_hint_keys[c-extension-module-cls0] ERROR [ 73%]
tests/test_multidict.py::TestMultiDict::test_iter_length_hint_keys[c-extension-module-cls1] ERROR [ 73%]
tests/test_multidict.py::TestMultiDict::test_iter_length_hint_items[c-extension-module-cls0] ERROR [ 73%]
tests/test_multidict.py::TestMultiDict::test_iter_length_hint_items[c-extension-module-cls1] ERROR [ 73%]
tests/test_multidict.py::TestMultiDict::test_iter_length_hint_values[c-extension-module-cls0] ERROR [ 73%]
tests/test_multidict.py::TestMultiDict::test_iter_length_hint_values[c-extension-module-cls1] ERROR [ 73%]
tests/test_multidict.py::TestMultiDict::test_ctor_list_arg_and_kwds[c-extension-module-cls0] ERROR [ 73%]
tests/test_multidict.py::TestMultiDict::test_ctor_list_arg_and_kwds[c-extension-module-cls1] ERROR [ 73%]
tests/test_multidict.py::TestMultiDict::test_ctor_tuple_arg_and_kwds[c-extension-module-cls0] ERROR [ 73%]
tests/test_multidict.py::TestMultiDict::test_ctor_tuple_arg_and_kwds[c-extension-module-cls1] ERROR [ 74%]
tests/test_multidict.py::TestMultiDict::test_ctor_deque_arg_and_kwds[c-extension-module-cls0] ERROR [ 74%]
tests/test_multidict.py::TestMultiDict::test_ctor_deque_arg_and_kwds[c-extension-module-cls1] ERROR [ 74%]
tests/test_multidict.py::TestMultiDict::test__repr__[c-extension-module-cls0] ERROR [ 74%]
tests/test_multidict.py::TestMultiDict::test__repr__[c-extension-module-cls1] ERROR [ 74%]
tests/test_multidict.py::TestMultiDict::test_getall[c-extension-module-cls0] ERROR [ 74%]
tests/test_multidict.py::TestMultiDict::test_getall[c-extension-module-cls1] ERROR [ 74%]
tests/test_multidict.py::TestMultiDict::test_preserve_stable_ordering[c-extension-module-cls0] ERROR [ 74%]
tests/test_multidict.py::TestMultiDict::test_preserve_stable_ordering[c-extension-module-cls1] ERROR [ 74%]
tests/test_multidict.py::TestMultiDict::test_get[c-extension-module-cls0] ERROR [ 75%]
tests/test_multidict.py::TestMultiDict::test_get[c-extension-module-cls1] ERROR [ 75%]
tests/test_multidict.py::TestMultiDict::test_items__repr__[c-extension-module-cls0] ERROR [ 75%]
tests/test_multidict.py::TestMultiDict::test_items__repr__[c-extension-module-cls1] ERROR [ 75%]
tests/test_multidict.py::TestMultiDict::test_keys__repr__[c-extension-module-cls0] ERROR [ 75%]
tests/test_multidict.py::TestMultiDict::test_keys__repr__[c-extension-module-cls1] ERROR [ 75%]
tests/test_multidict.py::TestMultiDict::test_values__repr__[c-extension-module-cls0] ERROR [ 75%]
tests/test_multidict.py::TestMultiDict::test_values__repr__[c-extension-module-cls1] ERROR [ 75%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__empty[c-extension-module-cls0] ERROR [ 75%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__empty[c-extension-module-cls1] ERROR [ 76%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__from_arg0[c-extension-module-cls0-arg00] ERROR [ 76%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__from_arg0[c-extension-module-cls0-arg01] ERROR [ 76%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__from_arg0[c-extension-module-cls1-arg00] ERROR [ 76%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__from_arg0[c-extension-module-cls1-arg01] ERROR [ 76%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__with_kwargs[c-extension-module-cls0] ERROR [ 76%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__with_kwargs[c-extension-module-cls1] ERROR [ 76%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__from_generator[c-extension-module-cls0] ERROR [ 76%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__from_generator[c-extension-module-cls1] ERROR [ 76%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__from_list_of_lists[c-extension-module-cls0] ERROR [ 76%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__from_list_of_lists[c-extension-module-cls1] ERROR [ 77%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__from_list_of_custom_pairs[c-extension-module-cls0] ERROR [ 77%]
tests/test_multidict.py::TestCIMultiDict::test_instantiate__from_list_of_custom_pairs[c-extension-module-cls1] ERROR [ 77%]
tests/test_multidict.py::TestCIMultiDict::test_getone[c-extension-module-cls0] ERROR [ 77%]
tests/test_multidict.py::TestCIMultiDict::test_getone[c-extension-module-cls1] ERROR [ 77%]
tests/test_multidict.py::TestCIMultiDict::test_call_with_kwargs[c-extension-module-cls0] ERROR [ 77%]
tests/test_multidict.py::TestCIMultiDict::test_call_with_kwargs[c-extension-module-cls1] ERROR [ 77%]
tests/test_multidict.py::TestCIMultiDict::test__iter__[c-extension-module-cls0] ERROR [ 77%]
tests/test_multidict.py::TestCIMultiDict::test__iter__[c-extension-module-cls1] ERROR [ 77%]
tests/test_multidict.py::TestCIMultiDict::test_keys__contains[c-extension-module-cls0] ERROR [ 78%]
tests/test_multidict.py::TestCIMultiDict::test_keys__contains[c-extension-module-cls1] ERROR [ 78%]
tests/test_multidict.py::TestCIMultiDict::test_values__contains[c-extension-module-cls0] ERROR [ 78%]
tests/test_multidict.py::TestCIMultiDict::test_values__contains[c-extension-module-cls1] ERROR [ 78%]
tests/test_multidict.py::TestCIMultiDict::test_items__contains[c-extension-module-cls0] ERROR [ 78%]
tests/test_multidict.py::TestCIMultiDict::test_items__contains[c-extension-module-cls1] ERROR [ 78%]
tests/test_multidict.py::TestCIMultiDict::test_cannot_create_from_unaccepted[c-extension-module-cls0] ERROR [ 78%]
tests/test_multidict.py::TestCIMultiDict::test_cannot_create_from_unaccepted[c-extension-module-cls1] ERROR [ 78%]
tests/test_multidict.py::TestCIMultiDict::test_keys_is_set_less[c-extension-module-cls0] ERROR [ 78%]
tests/test_multidict.py::TestCIMultiDict::test_keys_is_set_less[c-extension-module-cls1] ERROR [ 79%]
tests/test_multidict.py::TestCIMultiDict::test_keys_is_set_less_equal[c-extension-module-cls0] ERROR [ 79%]
tests/test_multidict.py::TestCIMultiDict::test_keys_is_set_less_equal[c-extension-module-cls1] ERROR [ 79%]
tests/test_multidict.py::TestCIMultiDict::test_keys_is_set_equal[c-extension-module-cls0] ERROR [ 79%]
tests/test_multidict.py::TestCIMultiDict::test_keys_is_set_equal[c-extension-module-cls1] ERROR [ 79%]
tests/test_multidict.py::TestCIMultiDict::test_keys_is_set_greater[c-extension-module-cls0] ERROR [ 79%]
tests/test_multidict.py::TestCIMultiDict::test_keys_is_set_greater[c-extension-module-cls1] ERROR [ 79%]
tests/test_multidict.py::TestCIMultiDict::test_keys_is_set_greater_equal[c-extension-module-cls0] ERROR [ 79%]
tests/test_multidict.py::TestCIMultiDict::test_keys_is_set_greater_equal[c-extension-module-cls1] ERROR [ 79%]
tests/test_multidict.py::TestCIMultiDict::test_keys_is_set_not_equal[c-extension-module-cls0] ERROR [ 80%]
tests/test_multidict.py::TestCIMultiDict::test_keys_is_set_not_equal[c-extension-module-cls1] ERROR [ 80%]
tests/test_multidict.py::TestCIMultiDict::test_eq[c-extension-module-cls0] ERROR [ 80%]
tests/test_multidict.py::TestCIMultiDict::test_eq[c-extension-module-cls1] ERROR [ 80%]
tests/test_multidict.py::TestCIMultiDict::test_eq2[c-extension-module-cls0] ERROR [ 80%]
tests/test_multidict.py::TestCIMultiDict::test_eq2[c-extension-module-cls1] ERROR [ 80%]
tests/test_multidict.py::TestCIMultiDict::test_eq3[c-extension-module-cls0] ERROR [ 80%]
tests/test_multidict.py::TestCIMultiDict::test_eq3[c-extension-module-cls1] ERROR [ 80%]
tests/test_multidict.py::TestCIMultiDict::test_eq_other_mapping_contains_more_keys[c-extension-module-cls0] ERROR [ 80%]
tests/test_multidict.py::TestCIMultiDict::test_eq_other_mapping_contains_more_keys[c-extension-module-cls1] ERROR [ 81%]
tests/test_multidict.py::TestCIMultiDict::test_eq_bad_mapping_len[c-extension-module-cls0] ERROR [ 81%]
tests/test_multidict.py::TestCIMultiDict::test_eq_bad_mapping_len[c-extension-module-cls1] ERROR [ 81%]
tests/test_multidict.py::TestCIMultiDict::test_eq_bad_mapping_getitem[c-extension-module-cls0] ERROR [ 81%]
tests/test_multidict.py::TestCIMultiDict::test_eq_bad_mapping_getitem[c-extension-module-cls1] ERROR [ 81%]
tests/test_multidict.py::TestCIMultiDict::test_ne[c-extension-module-cls0] ERROR [ 81%]
tests/test_multidict.py::TestCIMultiDict::test_ne[c-extension-module-cls1] ERROR [ 81%]
tests/test_multidict.py::TestCIMultiDict::test_and[c-extension-module-cls0] ERROR [ 81%]
tests/test_multidict.py::TestCIMultiDict::test_and[c-extension-module-cls1] ERROR [ 81%]
tests/test_multidict.py::TestCIMultiDict::test_and2[c-extension-module-cls0] ERROR [ 82%]
tests/test_multidict.py::TestCIMultiDict::test_and2[c-extension-module-cls1] ERROR [ 82%]
tests/test_multidict.py::TestCIMultiDict::test_bitwise_and_not_implemented[c-extension-module-cls0] ERROR [ 82%]
tests/test_multidict.py::TestCIMultiDict::test_bitwise_and_not_implemented[c-extension-module-cls1] ERROR [ 82%]
tests/test_multidict.py::TestCIMultiDict::test_bitwise_and_iterable_not_set[c-extension-module-cls0] ERROR [ 82%]
tests/test_multidict.py::TestCIMultiDict::test_bitwise_and_iterable_not_set[c-extension-module-cls1] ERROR [ 82%]
tests/test_multidict.py::TestCIMultiDict::test_or[c-extension-module-cls0] ERROR [ 82%]
tests/test_multidict.py::TestCIMultiDict::test_or[c-extension-module-cls1] ERROR [ 82%]
tests/test_multidict.py::TestCIMultiDict::test_or2[c-extension-module-cls0] ERROR [ 82%]
tests/test_multidict.py::TestCIMultiDict::test_or2[c-extension-module-cls1] ERROR [ 83%]
tests/test_multidict.py::TestCIMultiDict::test_bitwise_or_not_implemented[c-extension-module-cls0] ERROR [ 83%]
tests/test_multidict.py::TestCIMultiDict::test_bitwise_or_not_implemented[c-extension-module-cls1] ERROR [ 83%]
tests/test_multidict.py::TestCIMultiDict::test_bitwise_or_iterable_not_set[c-extension-module-cls0] ERROR [ 83%]
tests/test_multidict.py::TestCIMultiDict::test_bitwise_or_iterable_not_set[c-extension-module-cls1] ERROR [ 83%]
tests/test_multidict.py::TestCIMultiDict::test_sub[c-extension-module-cls0] ERROR [ 83%]
tests/test_multidict.py::TestCIMultiDict::test_sub[c-extension-module-cls1] ERROR [ 83%]
tests/test_multidict.py::TestCIMultiDict::test_sub2[c-extension-module-cls0] ERROR [ 83%]
tests/test_multidict.py::TestCIMultiDict::test_sub2[c-extension-module-cls1] ERROR [ 83%]
tests/test_multidict.py::TestCIMultiDict::test_sub_not_implemented[c-extension-module-cls0] ERROR [ 84%]
tests/test_multidict.py::TestCIMultiDict::test_sub_not_implemented[c-extension-module-cls1] ERROR [ 84%]
tests/test_multidict.py::TestCIMultiDict::test_sub_iterable_not_set[c-extension-module-cls0] ERROR [ 84%]
tests/test_multidict.py::TestCIMultiDict::test_sub_iterable_not_set[c-extension-module-cls1] ERROR [ 84%]
tests/test_multidict.py::TestCIMultiDict::test_xor[c-extension-module-cls0] ERROR [ 84%]
tests/test_multidict.py::TestCIMultiDict::test_xor[c-extension-module-cls1] ERROR [ 84%]
tests/test_multidict.py::TestCIMultiDict::test_xor2[c-extension-module-cls0] ERROR [ 84%]
tests/test_multidict.py::TestCIMultiDict::test_xor2[c-extension-module-cls1] ERROR [ 84%]
tests/test_multidict.py::TestCIMultiDict::test_xor_not_implemented[c-extension-module-cls0] ERROR [ 84%]
tests/test_multidict.py::TestCIMultiDict::test_xor_not_implemented[c-extension-module-cls1] ERROR [ 84%]
tests/test_multidict.py::TestCIMultiDict::test_xor_iterable_not_set[c-extension-module-cls0] ERROR [ 85%]
tests/test_multidict.py::TestCIMultiDict::test_xor_iterable_not_set[c-extension-module-cls1] ERROR [ 85%]
tests/test_multidict.py::TestCIMultiDict::test_isdisjoint[c-extension-module-cls0-key2-v-True] ERROR [ 85%]
tests/test_multidict.py::TestCIMultiDict::test_isdisjoint[c-extension-module-cls0-key-value1-False] ERROR [ 85%]
tests/test_multidict.py::TestCIMultiDict::test_isdisjoint[c-extension-module-cls1-key2-v-True] ERROR [ 85%]
tests/test_multidict.py::TestCIMultiDict::test_isdisjoint[c-extension-module-cls1-key-value1-False] ERROR [ 85%]
tests/test_multidict.py::TestCIMultiDict::test_repr_aiohttp_issue_410[c-extension-module-cls0] ERROR [ 85%]
tests/test_multidict.py::TestCIMultiDict::test_repr_aiohttp_issue_410[c-extension-module-cls1] ERROR [ 85%]
tests/test_multidict.py::TestCIMultiDict::test_op_issue_aiohttp_issue_410[c-extension-module-cls0-other0-or_] ERROR [ 85%]
tests/test_multidict.py::TestCIMultiDict::test_op_issue_aiohttp_issue_410[c-extension-module-cls0-other0-and_] ERROR [ 86%]
tests/test_multidict.py::TestCIMultiDict::test_op_issue_aiohttp_issue_410[c-extension-module-cls0-other0-sub] ERROR [ 86%]
tests/test_multidict.py::TestCIMultiDict::test_op_issue_aiohttp_issue_410[c-extension-module-cls0-other0-xor] ERROR [ 86%]
tests/test_multidict.py::TestCIMultiDict::test_op_issue_aiohttp_issue_410[c-extension-module-cls1-other0-or_] ERROR [ 86%]
tests/test_multidict.py::TestCIMultiDict::test_op_issue_aiohttp_issue_410[c-extension-module-cls1-other0-and_] ERROR [ 86%]
tests/test_multidict.py::TestCIMultiDict::test_op_issue_aiohttp_issue_410[c-extension-module-cls1-other0-sub] ERROR [ 86%]
tests/test_multidict.py::TestCIMultiDict::test_op_issue_aiohttp_issue_410[c-extension-module-cls1-other0-xor] ERROR [ 86%]
tests/test_multidict.py::TestCIMultiDict::test_weakref[c-extension-module-cls0] ERROR [ 86%]
tests/test_multidict.py::TestCIMultiDict::test_weakref[c-extension-module-cls1] ERROR [ 86%]
tests/test_multidict.py::TestCIMultiDict::test_iter_length_hint_keys[c-extension-module-cls0] ERROR [ 87%]
tests/test_multidict.py::TestCIMultiDict::test_iter_length_hint_keys[c-extension-module-cls1] ERROR [ 87%]
tests/test_multidict.py::TestCIMultiDict::test_iter_length_hint_items[c-extension-module-cls0] ERROR [ 87%]
tests/test_multidict.py::TestCIMultiDict::test_iter_length_hint_items[c-extension-module-cls1] ERROR [ 87%]
tests/test_multidict.py::TestCIMultiDict::test_iter_length_hint_values[c-extension-module-cls0] ERROR [ 87%]
tests/test_multidict.py::TestCIMultiDict::test_iter_length_hint_values[c-extension-module-cls1] ERROR [ 87%]
tests/test_multidict.py::TestCIMultiDict::test_ctor_list_arg_and_kwds[c-extension-module-cls0] ERROR [ 87%]
tests/test_multidict.py::TestCIMultiDict::test_ctor_list_arg_and_kwds[c-extension-module-cls1] ERROR [ 87%]
tests/test_multidict.py::TestCIMultiDict::test_ctor_tuple_arg_and_kwds[c-extension-module-cls0] ERROR [ 87%]
tests/test_multidict.py::TestCIMultiDict::test_ctor_tuple_arg_and_kwds[c-extension-module-cls1] ERROR [ 88%]
tests/test_multidict.py::TestCIMultiDict::test_ctor_deque_arg_and_kwds[c-extension-module-cls0] ERROR [ 88%]
tests/test_multidict.py::TestCIMultiDict::test_ctor_deque_arg_and_kwds[c-extension-module-cls1] ERROR [ 88%]
tests/test_multidict.py::TestCIMultiDict::test_basics[c-extension-module-cls0] ERROR [ 88%]
tests/test_multidict.py::TestCIMultiDict::test_basics[c-extension-module-cls1] ERROR [ 88%]
tests/test_multidict.py::TestCIMultiDict::test_getall[c-extension-module-cls0] ERROR [ 88%]
tests/test_multidict.py::TestCIMultiDict::test_getall[c-extension-module-cls1] ERROR [ 88%]
tests/test_multidict.py::TestCIMultiDict::test_get[c-extension-module-cls0] ERROR [ 88%]
tests/test_multidict.py::TestCIMultiDict::test_get[c-extension-module-cls1] ERROR [ 88%]
tests/test_multidict.py::TestCIMultiDict::test__repr__[c-extension-module-cls0] ERROR [ 89%]
tests/test_multidict.py::TestCIMultiDict::test__repr__[c-extension-module-cls1] ERROR [ 89%]
tests/test_multidict.py::TestCIMultiDict::test_items__repr__[c-extension-module-cls0] ERROR [ 89%]
tests/test_multidict.py::TestCIMultiDict::test_items__repr__[c-extension-module-cls1] ERROR [ 89%]
tests/test_multidict.py::TestCIMultiDict::test_keys__repr__[c-extension-module-cls0] ERROR [ 89%]
tests/test_multidict.py::TestCIMultiDict::test_keys__repr__[c-extension-module-cls1] ERROR [ 89%]
tests/test_multidict.py::TestCIMultiDict::test_values__repr__[c-extension-module-cls0] ERROR [ 89%]
tests/test_multidict.py::TestCIMultiDict::test_values__repr__[c-extension-module-cls1] ERROR [ 89%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_copy[c-extension-module] ERROR [ 89%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test__repr__[c-extension-module] ERROR [ 90%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_getall[c-extension-module] ERROR [ 90%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_add[c-extension-module] ERROR [ 90%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_extend[c-extension-module] ERROR [ 90%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_extend_from_proxy[c-extension-module] ERROR [ 90%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_clear[c-extension-module] ERROR [ 90%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_del[c-extension-module] ERROR [ 90%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_set_default[c-extension-module] ERROR [ 90%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_popitem[c-extension-module] ERROR [ 90%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_popitem_empty_multidict[c-extension-module] ERROR [ 91%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_pop[c-extension-module] ERROR [ 91%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_pop2[c-extension-module] ERROR [ 91%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_pop_default[c-extension-module] ERROR [ 91%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_pop_raises[c-extension-module] ERROR [ 91%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_replacement_order[c-extension-module] ERROR [ 91%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_nonstr_key[c-extension-module] ERROR [ 91%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_istr_key[c-extension-module] ERROR [ 91%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_str_derived_key[c-extension-module] ERROR [ 91%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_istr_key_add[c-extension-module] ERROR [ 92%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_str_derived_key_add[c-extension-module] ERROR [ 92%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_popall[c-extension-module] ERROR [ 92%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_popall_default[c-extension-module] ERROR [ 92%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_popall_key_error[c-extension-module] ERROR [ 92%]
tests/test_mutable_multidict.py::TestMutableMultiDict::test_large_multidict_resizing[c-extension-module] ERROR [ 92%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_getall[c-extension-module] ERROR [ 92%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_ctor[c-extension-module] ERROR [ 92%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_setitem[c-extension-module] ERROR [ 92%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_delitem[c-extension-module] ERROR [ 92%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_copy[c-extension-module] ERROR [ 93%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test__repr__[c-extension-module] ERROR [ 93%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_add[c-extension-module] ERROR [ 93%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_extend[c-extension-module] ERROR [ 93%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_extend_from_proxy[c-extension-module] ERROR [ 93%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_clear[c-extension-module] ERROR [ 93%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_del[c-extension-module] ERROR [ 93%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_set_default[c-extension-module] ERROR [ 93%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_popitem[c-extension-module] ERROR [ 93%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_popitem_empty_multidict[c-extension-module] ERROR [ 94%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_pop[c-extension-module] ERROR [ 94%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_pop_lowercase[c-extension-module] ERROR [ 94%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_pop_default[c-extension-module] ERROR [ 94%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_pop_raises[c-extension-module] ERROR [ 94%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_extend_with_istr[c-extension-module] ERROR [ 94%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_copy_istr[c-extension-module] ERROR [ 94%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_eq[c-extension-module] ERROR [ 94%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_sizeof[c-extension-module] ERROR [ 94%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_min_sizeof[c-extension-module] ERROR [ 95%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_issue_620_items[c-extension-module] ERROR [ 95%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_issue_620_keys[c-extension-module] ERROR [ 95%]
tests/test_mutable_multidict.py::TestCIMutableMultiDict::test_issue_620_values[c-extension-module] ERROR [ 95%]
tests/test_types.py::test_proxies[c-extension-module] ERROR              [ 95%]
tests/test_types.py::test_dicts[c-extension-module] ERROR                [ 95%]
tests/test_types.py::test_proxy_not_inherited_from_dict[c-extension-module] ERROR [ 95%]
tests/test_types.py::test_dict_not_inherited_from_proxy[c-extension-module] ERROR [ 95%]
tests/test_types.py::test_multidict_proxy_copy_type[c-extension-module] ERROR [ 95%]
tests/test_types.py::test_cimultidict_proxy_copy_type[c-extension-module] ERROR [ 96%]
tests/test_types.py::test_create_multidict_proxy_from_nonmultidict[c-extension-module] ERROR [ 96%]
tests/test_types.py::test_create_multidict_proxy_from_cimultidict[c-extension-module] ERROR [ 96%]
tests/test_types.py::test_create_multidict_proxy_from_multidict_proxy_from_mdict[c-extension-module] ERROR [ 96%]
tests/test_types.py::test_create_cimultidict_proxy_from_cimultidict_proxy_from_ci[c-extension-module] ERROR [ 96%]
tests/test_types.py::test_create_cimultidict_proxy_from_nonmultidict[c-extension-module] ERROR [ 96%]
tests/test_types.py::test_create_ci_multidict_proxy_from_multidict[c-extension-module] ERROR [ 96%]
tests/test_types.py::test_generic_exists[c-extension-module] SKIPPED     [ 96%]
tests/test_types.py::test_generic_alias[c-extension-module] ERROR        [ 96%]
tests/test_update.py::test_update_md[c-extension-module] ERROR           [ 97%]
tests/test_update.py::test_update_istr_ci_md[c-extension-module] ERROR   [ 97%]
tests/test_update.py::test_update_ci_md[c-extension-module] ERROR        [ 97%]
tests/test_version.py::test_getversion_bad_param[c-extension-module] ERROR [ 97%]
tests/test_abc.py::test_generic_type_in_runtime PASSED                   [ 97%]
tests/test_circular_imports.py::test_no_warnings[multidict] PASSED       [ 97%]
tests/test_circular_imports.py::test_no_warnings[multidict._abc] PASSED  [ 97%]
tests/test_circular_imports.py::test_no_warnings[multidict._compat] PASSED [ 97%]
tests/test_circular_imports.py::test_no_warnings[multidict._multidict_base] PASSED [ 97%]
tests/test_circular_imports.py::test_no_warnings[multidict._multidict_py] PASSED [ 98%]
tests/test_circular_imports.py::test_c_extension_preferred_by_default PASSED [ 98%]
tests/test_mypy.py::test_classes_not_abstract PASSED                     [ 98%]
tests/test_mypy.py::test_getitem PASSED                                  [ 98%]
tests/test_mypy.py::test_get PASSED                                      [ 98%]
tests/test_mypy.py::test_get_default PASSED                              [ 98%]
tests/test_mypy.py::test_getone PASSED                                   [ 98%]
tests/test_mypy.py::test_getone_default PASSED                           [ 98%]
tests/test_mypy.py::test_getall PASSED                                   [ 98%]
tests/test_mypy.py::test_getall_default PASSED                           [ 99%]
tests/test_mypy.py::test_copy PASSED                                     [ 99%]
tests/test_mypy.py::test_iter PASSED                                     [ 99%]
tests/test_mypy.py::test_setitem PASSED                                  [ 99%]
tests/test_mypy.py::test_delitem PASSED                                  [ 99%]
tests/test_mypy.py::test_additem PASSED                                  [ 99%]
tests/test_mypy.py::test_extend_mapping PASSED                           [ 99%]
tests/test_mypy.py::test_update_mapping PASSED                           [ 99%]
tests/test_mypy.py::test_popone PASSED                                   [ 99%]
tests/test_mypy.py::test_popall PASSED                                   [100%]

==================================== ERRORS ====================================
_ ERROR at setup of test_multidict_inheritance[case-sensitive-c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_proxy_inheritance[case-sensitive-c-extension-module] __

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
________ ERROR at setup of test_copy[case-sensitive-c-extension-module] ________

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of test_copy_proxy[case-sensitive-c-extension-module] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___ ERROR at setup of test_copy_std_copy[case-sensitive-c-extension-module] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_ci_multidict_clone[case-sensitive-c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of test_proxy_copy[case-sensitive-c-extension-module] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_multidict_subclassing[case-sensitive-c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_multidict_proxy_subclassing[case-sensitive-c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of test_pickle[case-sensitive-c-extension-module-0] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
__ ERROR at setup of test_load_from_file[c-extension-module-case-sensitive-0] __

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of test_pickle[case-sensitive-c-extension-module-1] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
__ ERROR at setup of test_load_from_file[c-extension-module-case-sensitive-1] __

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of test_pickle[case-sensitive-c-extension-module-2] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
__ ERROR at setup of test_load_from_file[c-extension-module-case-sensitive-2] __

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of test_pickle[case-sensitive-c-extension-module-3] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
__ ERROR at setup of test_load_from_file[c-extension-module-case-sensitive-3] __

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of test_pickle[case-sensitive-c-extension-module-4] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
__ ERROR at setup of test_load_from_file[c-extension-module-case-sensitive-4] __

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of test_pickle[case-sensitive-c-extension-module-5] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
__ ERROR at setup of test_load_from_file[c-extension-module-case-sensitive-5] __

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of test_pickle_proxy[case-sensitive-c-extension-module] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___ ERROR at setup of test_update_replace[case-sensitive-c-extension-module] ___

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___ ERROR at setup of test_update_append[case-sensitive-c-extension-module] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___ ERROR at setup of test_update_remove[case-sensitive-c-extension-module] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_update_replace_seq[case-sensitive-c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_update_replace_seq2[case-sensitive-c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_update_append_seq[case-sensitive-c-extension-module] __

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_update_remove_seq[case-sensitive-c-extension-module] __

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_update_list_arg_and_kwds[case-sensitive-c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_update_tuple_arg_and_kwds[case-sensitive-c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_update_deque_arg_and_kwds[case-sensitive-c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
________ ERROR at setup of test_ctor[case-sensitive-c-extension-module] ________

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
________ ERROR at setup of test_add[case-sensitive-c-extension-module] _________

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of test_delitem[case-sensitive-c-extension-module] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_delitem_not_found[case-sensitive-c-extension-module] __

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of test_setitem[case-sensitive-c-extension-module] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_setitem_not_found[case-sensitive-c-extension-module] __

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_______ ERROR at setup of test_clear[case-sensitive-c-extension-module] ________

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of test_setdefault[case-sensitive-c-extension-module] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_______ ERROR at setup of test_popone[case-sensitive-c-extension-module] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___ ERROR at setup of test_popone_default[case-sensitive-c-extension-module] ___

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
__ ERROR at setup of test_popone_key_error[case-sensitive-c-extension-module] __

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
________ ERROR at setup of test_pop[case-sensitive-c-extension-module] _________

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of test_pop_default[case-sensitive-c-extension-module] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___ ERROR at setup of test_pop_key_error[case-sensitive-c-extension-module] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_______ ERROR at setup of test_popall[case-sensitive-c-extension-module] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___ ERROR at setup of test_popall_default[case-sensitive-c-extension-module] ___

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
__ ERROR at setup of test_popall_key_error[case-sensitive-c-extension-module] __

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of test_popitem[case-sensitive-c-extension-module] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_popitem_key_error[case-sensitive-c-extension-module] __

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_load_from_file[c-extension-module-case-insensitive-0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_multidict_inheritance[case-insensitive-c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_proxy_inheritance[case-insensitive-c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_______ ERROR at setup of test_copy[case-insensitive-c-extension-module] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of test_copy_proxy[case-insensitive-c-extension-module] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
__ ERROR at setup of test_copy_std_copy[case-insensitive-c-extension-module] ___

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_ci_multidict_clone[case-insensitive-c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of test_proxy_copy[case-insensitive-c-extension-module] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_multidict_subclassing[case-insensitive-c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_multidict_proxy_subclassing[case-insensitive-c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of test_pickle[case-insensitive-c-extension-module-0] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of test_pickle[case-insensitive-c-extension-module-1] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of test_pickle[case-insensitive-c-extension-module-2] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of test_pickle[case-insensitive-c-extension-module-3] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of test_pickle[case-insensitive-c-extension-module-4] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of test_pickle[case-insensitive-c-extension-module-5] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___ ERROR at setup of test_pickle_proxy[case-insensitive-c-extension-module] ___

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_load_from_file[c-extension-module-case-insensitive-1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_load_from_file[c-extension-module-case-insensitive-2] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_load_from_file[c-extension-module-case-insensitive-3] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_load_from_file[c-extension-module-case-insensitive-4] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_load_from_file[c-extension-module-case-insensitive-5] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
__ ERROR at setup of test_update_replace[case-insensitive-c-extension-module] __

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
__ ERROR at setup of test_update_append[case-insensitive-c-extension-module] ___

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
__ ERROR at setup of test_update_remove[case-insensitive-c-extension-module] ___

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_update_replace_seq[case-insensitive-c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_update_replace_seq2[case-insensitive-c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_update_append_seq[case-insensitive-c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_update_remove_seq[case-insensitive-c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_update_list_arg_and_kwds[case-insensitive-c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_update_tuple_arg_and_kwds[case-insensitive-c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_update_deque_arg_and_kwds[case-insensitive-c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_______ ERROR at setup of test_ctor[case-insensitive-c-extension-module] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_______ ERROR at setup of test_add[case-insensitive-c-extension-module] ________

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of test_delitem[case-insensitive-c-extension-module] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_delitem_not_found[case-insensitive-c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of test_setitem[case-insensitive-c-extension-module] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_setitem_not_found[case-insensitive-c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of test_clear[case-insensitive-c-extension-module] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of test_setdefault[case-insensitive-c-extension-module] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of test_popone[case-insensitive-c-extension-module] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
__ ERROR at setup of test_popone_default[case-insensitive-c-extension-module] __

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_popone_key_error[case-insensitive-c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_______ ERROR at setup of test_pop[case-insensitive-c-extension-module] ________

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___ ERROR at setup of test_pop_default[case-insensitive-c-extension-module] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
__ ERROR at setup of test_pop_key_error[case-insensitive-c-extension-module] ___

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of test_popall[case-insensitive-c-extension-module] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
__ ERROR at setup of test_popall_default[case-insensitive-c-extension-module] __

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_popall_key_error[case-insensitive-c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of test_popitem[case-insensitive-c-extension-module] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_popitem_key_error[case-insensitive-c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____________ ERROR at setup of test_guard_items[c-extension-module] ____________

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____________ ERROR at setup of test_guard_keys[c-extension-module] _____________

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___________ ERROR at setup of test_guard_values[c-extension-module] ____________

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_______________ ERROR at setup of test_ctor[c-extension-module] ________________

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____________ ERROR at setup of test_ctor_str[c-extension-module] ______________

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____________ ERROR at setup of test_ctor_istr[c-extension-module] _____________

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____________ ERROR at setup of test_ctor_buffer[c-extension-module] ____________

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____________ ERROR at setup of test_ctor_repr[c-extension-module] _____________

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
________________ ERROR at setup of test_str[c-extension-module] ________________

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
________________ ERROR at setup of test_eq[c-extension-module] _________________

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_______________ ERROR at setup of test_leak[c-extension-module] ________________

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_______ ERROR at setup of test__iter__types[c-extension-module-cls0-str] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_______ ERROR at setup of test__iter__types[c-extension-module-cls1-str] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_instantiate__empty[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_instantiate__empty[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_instantiate__from_arg0[c-extension-module-cls0-arg00] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_instantiate__from_arg0[c-extension-module-cls0-arg01] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_instantiate__from_arg0[c-extension-module-cls1-arg00] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_instantiate__from_arg0[c-extension-module-cls1-arg01] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_instantiate__with_kwargs[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_instantiate__with_kwargs[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_instantiate__from_generator[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_instantiate__from_generator[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_instantiate__from_list_of_lists[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_instantiate__from_list_of_lists[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_instantiate__from_list_of_custom_pairs[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_instantiate__from_list_of_custom_pairs[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestMultiDict.test_getone[c-extension-module-cls0] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestMultiDict.test_getone[c-extension-module-cls1] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_call_with_kwargs[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_call_with_kwargs[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of TestMultiDict.test__iter__[c-extension-module-cls0] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of TestMultiDict.test__iter__[c-extension-module-cls1] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_keys__contains[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_keys__contains[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_values__contains[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_values__contains[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_items__contains[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_items__contains[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_cannot_create_from_unaccepted[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_cannot_create_from_unaccepted[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_keys_is_set_less[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_keys_is_set_less[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_keys_is_set_less_equal[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_keys_is_set_less_equal[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_keys_is_set_equal[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_keys_is_set_equal[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_keys_is_set_greater[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_keys_is_set_greater[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_keys_is_set_greater_equal[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_keys_is_set_greater_equal[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_keys_is_set_not_equal[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_keys_is_set_not_equal[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_______ ERROR at setup of TestMultiDict.test_eq[c-extension-module-cls0] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_______ ERROR at setup of TestMultiDict.test_eq[c-extension-module-cls1] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of TestMultiDict.test_eq2[c-extension-module-cls0] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of TestMultiDict.test_eq2[c-extension-module-cls1] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of TestMultiDict.test_eq3[c-extension-module-cls0] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of TestMultiDict.test_eq3[c-extension-module-cls1] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_eq_other_mapping_contains_more_keys[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_eq_other_mapping_contains_more_keys[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_eq_bad_mapping_len[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_eq_bad_mapping_len[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_eq_bad_mapping_getitem[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_eq_bad_mapping_getitem[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_______ ERROR at setup of TestMultiDict.test_ne[c-extension-module-cls0] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_______ ERROR at setup of TestMultiDict.test_ne[c-extension-module-cls1] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of TestMultiDict.test_and[c-extension-module-cls0] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of TestMultiDict.test_and[c-extension-module-cls1] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of TestMultiDict.test_and2[c-extension-module-cls0] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of TestMultiDict.test_and2[c-extension-module-cls1] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_bitwise_and_not_implemented[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_bitwise_and_not_implemented[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_bitwise_and_iterable_not_set[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_bitwise_and_iterable_not_set[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_______ ERROR at setup of TestMultiDict.test_or[c-extension-module-cls0] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_______ ERROR at setup of TestMultiDict.test_or[c-extension-module-cls1] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of TestMultiDict.test_or2[c-extension-module-cls0] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of TestMultiDict.test_or2[c-extension-module-cls1] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_bitwise_or_not_implemented[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_bitwise_or_not_implemented[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_bitwise_or_iterable_not_set[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_bitwise_or_iterable_not_set[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of TestMultiDict.test_sub[c-extension-module-cls0] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of TestMultiDict.test_sub[c-extension-module-cls1] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of TestMultiDict.test_sub2[c-extension-module-cls0] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of TestMultiDict.test_sub2[c-extension-module-cls1] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_sub_not_implemented[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_sub_not_implemented[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_sub_iterable_not_set[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_sub_iterable_not_set[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of TestMultiDict.test_xor[c-extension-module-cls0] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of TestMultiDict.test_xor[c-extension-module-cls1] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of TestMultiDict.test_xor2[c-extension-module-cls0] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of TestMultiDict.test_xor2[c-extension-module-cls1] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_xor_not_implemented[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_xor_not_implemented[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_xor_iterable_not_set[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_xor_iterable_not_set[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_isdisjoint[c-extension-module-cls0-key2-v-True] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_isdisjoint[c-extension-module-cls0-key-value1-False] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_isdisjoint[c-extension-module-cls1-key2-v-True] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_isdisjoint[c-extension-module-cls1-key-value1-False] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_repr_aiohttp_issue_410[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_repr_aiohttp_issue_410[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_op_issue_aiohttp_issue_410[c-extension-module-cls0-other0-or_] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_op_issue_aiohttp_issue_410[c-extension-module-cls0-other0-and_] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_op_issue_aiohttp_issue_410[c-extension-module-cls0-other0-sub] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_op_issue_aiohttp_issue_410[c-extension-module-cls0-other0-xor] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_op_issue_aiohttp_issue_410[c-extension-module-cls1-other0-or_] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_op_issue_aiohttp_issue_410[c-extension-module-cls1-other0-and_] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_op_issue_aiohttp_issue_410[c-extension-module-cls1-other0-sub] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_op_issue_aiohttp_issue_410[c-extension-module-cls1-other0-xor] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of TestMultiDict.test_weakref[c-extension-module-cls0] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of TestMultiDict.test_weakref[c-extension-module-cls1] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_iter_length_hint_keys[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_iter_length_hint_keys[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_iter_length_hint_items[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_iter_length_hint_items[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_iter_length_hint_values[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_iter_length_hint_values[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_ctor_list_arg_and_kwds[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_ctor_list_arg_and_kwds[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_ctor_tuple_arg_and_kwds[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_ctor_tuple_arg_and_kwds[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_ctor_deque_arg_and_kwds[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_ctor_deque_arg_and_kwds[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of TestMultiDict.test__repr__[c-extension-module-cls0] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of TestMultiDict.test__repr__[c-extension-module-cls1] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestMultiDict.test_getall[c-extension-module-cls0] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestMultiDict.test_getall[c-extension-module-cls1] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_preserve_stable_ordering[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_preserve_stable_ordering[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of TestMultiDict.test_get[c-extension-module-cls0] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of TestMultiDict.test_get[c-extension-module-cls1] _______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_items__repr__[c-extension-module-cls0] __

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_items__repr__[c-extension-module-cls1] __

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
__ ERROR at setup of TestMultiDict.test_keys__repr__[c-extension-module-cls0] __

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
__ ERROR at setup of TestMultiDict.test_keys__repr__[c-extension-module-cls1] __

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_values__repr__[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMultiDict.test_values__repr__[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_instantiate__empty[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_instantiate__empty[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_instantiate__from_arg0[c-extension-module-cls0-arg00] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_instantiate__from_arg0[c-extension-module-cls0-arg01] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_instantiate__from_arg0[c-extension-module-cls1-arg00] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_instantiate__from_arg0[c-extension-module-cls1-arg01] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_instantiate__with_kwargs[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_instantiate__with_kwargs[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_instantiate__from_generator[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_instantiate__from_generator[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_instantiate__from_list_of_lists[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_instantiate__from_list_of_lists[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_instantiate__from_list_of_custom_pairs[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_instantiate__from_list_of_custom_pairs[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of TestCIMultiDict.test_getone[c-extension-module-cls0] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of TestCIMultiDict.test_getone[c-extension-module-cls1] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_call_with_kwargs[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_call_with_kwargs[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___ ERROR at setup of TestCIMultiDict.test__iter__[c-extension-module-cls0] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___ ERROR at setup of TestCIMultiDict.test__iter__[c-extension-module-cls1] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_keys__contains[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_keys__contains[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_values__contains[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_values__contains[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_items__contains[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_items__contains[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_cannot_create_from_unaccepted[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_cannot_create_from_unaccepted[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_keys_is_set_less[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_keys_is_set_less[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_keys_is_set_less_equal[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_keys_is_set_less_equal[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_keys_is_set_equal[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_keys_is_set_equal[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_keys_is_set_greater[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_keys_is_set_greater[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_keys_is_set_greater_equal[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_keys_is_set_greater_equal[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_keys_is_set_not_equal[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_keys_is_set_not_equal[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of TestCIMultiDict.test_eq[c-extension-module-cls0] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of TestCIMultiDict.test_eq[c-extension-module-cls1] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestCIMultiDict.test_eq2[c-extension-module-cls0] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestCIMultiDict.test_eq2[c-extension-module-cls1] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestCIMultiDict.test_eq3[c-extension-module-cls0] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestCIMultiDict.test_eq3[c-extension-module-cls1] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_eq_other_mapping_contains_more_keys[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_eq_other_mapping_contains_more_keys[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_eq_bad_mapping_len[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_eq_bad_mapping_len[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_eq_bad_mapping_getitem[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_eq_bad_mapping_getitem[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of TestCIMultiDict.test_ne[c-extension-module-cls0] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of TestCIMultiDict.test_ne[c-extension-module-cls1] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestCIMultiDict.test_and[c-extension-module-cls0] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestCIMultiDict.test_and[c-extension-module-cls1] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestCIMultiDict.test_and2[c-extension-module-cls0] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestCIMultiDict.test_and2[c-extension-module-cls1] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_bitwise_and_not_implemented[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_bitwise_and_not_implemented[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_bitwise_and_iterable_not_set[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_bitwise_and_iterable_not_set[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of TestCIMultiDict.test_or[c-extension-module-cls0] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______ ERROR at setup of TestCIMultiDict.test_or[c-extension-module-cls1] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestCIMultiDict.test_or2[c-extension-module-cls0] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestCIMultiDict.test_or2[c-extension-module-cls1] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_bitwise_or_not_implemented[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_bitwise_or_not_implemented[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_bitwise_or_iterable_not_set[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_bitwise_or_iterable_not_set[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestCIMultiDict.test_sub[c-extension-module-cls0] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestCIMultiDict.test_sub[c-extension-module-cls1] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestCIMultiDict.test_sub2[c-extension-module-cls0] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestCIMultiDict.test_sub2[c-extension-module-cls1] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_sub_not_implemented[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_sub_not_implemented[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_sub_iterable_not_set[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_sub_iterable_not_set[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestCIMultiDict.test_xor[c-extension-module-cls0] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestCIMultiDict.test_xor[c-extension-module-cls1] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestCIMultiDict.test_xor2[c-extension-module-cls0] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestCIMultiDict.test_xor2[c-extension-module-cls1] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_xor_not_implemented[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_xor_not_implemented[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_xor_iterable_not_set[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_xor_iterable_not_set[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_isdisjoint[c-extension-module-cls0-key2-v-True] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_isdisjoint[c-extension-module-cls0-key-value1-False] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_isdisjoint[c-extension-module-cls1-key2-v-True] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_isdisjoint[c-extension-module-cls1-key-value1-False] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_repr_aiohttp_issue_410[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_repr_aiohttp_issue_410[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_op_issue_aiohttp_issue_410[c-extension-module-cls0-other0-or_] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_op_issue_aiohttp_issue_410[c-extension-module-cls0-other0-and_] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_op_issue_aiohttp_issue_410[c-extension-module-cls0-other0-sub] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_op_issue_aiohttp_issue_410[c-extension-module-cls0-other0-xor] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_op_issue_aiohttp_issue_410[c-extension-module-cls1-other0-or_] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_op_issue_aiohttp_issue_410[c-extension-module-cls1-other0-and_] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_op_issue_aiohttp_issue_410[c-extension-module-cls1-other0-sub] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_op_issue_aiohttp_issue_410[c-extension-module-cls1-other0-xor] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___ ERROR at setup of TestCIMultiDict.test_weakref[c-extension-module-cls0] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___ ERROR at setup of TestCIMultiDict.test_weakref[c-extension-module-cls1] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_iter_length_hint_keys[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_iter_length_hint_keys[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_iter_length_hint_items[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_iter_length_hint_items[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_iter_length_hint_values[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_iter_length_hint_values[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_ctor_list_arg_and_kwds[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_ctor_list_arg_and_kwds[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_ctor_tuple_arg_and_kwds[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_ctor_tuple_arg_and_kwds[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_ctor_deque_arg_and_kwds[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_ctor_deque_arg_and_kwds[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of TestCIMultiDict.test_basics[c-extension-module-cls0] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of TestCIMultiDict.test_basics[c-extension-module-cls1] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of TestCIMultiDict.test_getall[c-extension-module-cls0] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of TestCIMultiDict.test_getall[c-extension-module-cls1] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestCIMultiDict.test_get[c-extension-module-cls0] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestCIMultiDict.test_get[c-extension-module-cls1] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___ ERROR at setup of TestCIMultiDict.test__repr__[c-extension-module-cls0] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___ ERROR at setup of TestCIMultiDict.test__repr__[c-extension-module-cls1] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_items__repr__[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_items__repr__[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_keys__repr__[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_keys__repr__[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_values__repr__[c-extension-module-cls0] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMultiDict.test_values__repr__[c-extension-module-cls1] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestMutableMultiDict.test_copy[c-extension-module] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___ ERROR at setup of TestMutableMultiDict.test__repr__[c-extension-module] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of TestMutableMultiDict.test_getall[c-extension-module] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestMutableMultiDict.test_add[c-extension-module] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of TestMutableMultiDict.test_extend[c-extension-module] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMutableMultiDict.test_extend_from_proxy[c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of TestMutableMultiDict.test_clear[c-extension-module] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestMutableMultiDict.test_del[c-extension-module] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMutableMultiDict.test_set_default[c-extension-module] __

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___ ERROR at setup of TestMutableMultiDict.test_popitem[c-extension-module] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMutableMultiDict.test_popitem_empty_multidict[c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestMutableMultiDict.test_pop[c-extension-module] ______

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestMutableMultiDict.test_pop2[c-extension-module] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMutableMultiDict.test_pop_default[c-extension-module] __

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
__ ERROR at setup of TestMutableMultiDict.test_pop_raises[c-extension-module] __

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMutableMultiDict.test_replacement_order[c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
__ ERROR at setup of TestMutableMultiDict.test_nonstr_key[c-extension-module] __

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___ ERROR at setup of TestMutableMultiDict.test_istr_key[c-extension-module] ___

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMutableMultiDict.test_str_derived_key[c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMutableMultiDict.test_istr_key_add[c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMutableMultiDict.test_str_derived_key_add[c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of TestMutableMultiDict.test_popall[c-extension-module] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMutableMultiDict.test_popall_default[c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMutableMultiDict.test_popall_key_error[c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestMutableMultiDict.test_large_multidict_resizing[c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___ ERROR at setup of TestCIMutableMultiDict.test_getall[c-extension-module] ___

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of TestCIMutableMultiDict.test_ctor[c-extension-module] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
__ ERROR at setup of TestCIMutableMultiDict.test_setitem[c-extension-module] ___

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
__ ERROR at setup of TestCIMutableMultiDict.test_delitem[c-extension-module] ___

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of TestCIMutableMultiDict.test_copy[c-extension-module] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
__ ERROR at setup of TestCIMutableMultiDict.test__repr__[c-extension-module] ___

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of TestCIMutableMultiDict.test_add[c-extension-module] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___ ERROR at setup of TestCIMutableMultiDict.test_extend[c-extension-module] ___

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMutableMultiDict.test_extend_from_proxy[c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___ ERROR at setup of TestCIMutableMultiDict.test_clear[c-extension-module] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of TestCIMutableMultiDict.test_del[c-extension-module] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMutableMultiDict.test_set_default[c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
__ ERROR at setup of TestCIMutableMultiDict.test_popitem[c-extension-module] ___

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMutableMultiDict.test_popitem_empty_multidict[c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of TestCIMutableMultiDict.test_pop[c-extension-module] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMutableMultiDict.test_pop_lowercase[c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMutableMultiDict.test_pop_default[c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMutableMultiDict.test_pop_raises[c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMutableMultiDict.test_extend_with_istr[c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMutableMultiDict.test_copy_istr[c-extension-module] __

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of TestCIMutableMultiDict.test_eq[c-extension-module] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___ ERROR at setup of TestCIMutableMultiDict.test_sizeof[c-extension-module] ___

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMutableMultiDict.test_min_sizeof[c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMutableMultiDict.test_issue_620_items[c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMutableMultiDict.test_issue_620_keys[c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of TestCIMutableMultiDict.test_issue_620_values[c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
______________ ERROR at setup of test_proxies[c-extension-module] ______________

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_______________ ERROR at setup of test_dicts[c-extension-module] _______________

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___ ERROR at setup of test_proxy_not_inherited_from_dict[c-extension-module] ___

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___ ERROR at setup of test_dict_not_inherited_from_proxy[c-extension-module] ___

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____ ERROR at setup of test_multidict_proxy_copy_type[c-extension-module] _____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
____ ERROR at setup of test_cimultidict_proxy_copy_type[c-extension-module] ____

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_create_multidict_proxy_from_nonmultidict[c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_create_multidict_proxy_from_cimultidict[c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_create_multidict_proxy_from_multidict_proxy_from_mdict[c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_create_cimultidict_proxy_from_cimultidict_proxy_from_ci[c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_create_cimultidict_proxy_from_nonmultidict[c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_ ERROR at setup of test_create_ci_multidict_proxy_from_multidict[c-extension-module] _

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___________ ERROR at setup of test_generic_alias[c-extension-module] ___________

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_____________ ERROR at setup of test_update_md[c-extension-module] _____________

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_________ ERROR at setup of test_update_istr_ci_md[c-extension-module] _________

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
___________ ERROR at setup of test_update_ci_md[c-extension-module] ____________

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
_______ ERROR at setup of test_getversion_bad_param[c-extension-module] ________

multidict_implementation = MultidictImplementation(is_pure_python=False)

    @pytest.fixture(scope="session")
    def multidict_module(
        multidict_implementation: MultidictImplementation,
    ) -> ModuleType:
        """Return a pre-imported module containing a multidict variant."""
>       return multidict_implementation.imported_module

tests/conftest.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/functools.py:993: in __get__
    val = self.func(instance)
tests/conftest.py:52: in imported_module
    return import_module(f"multidict.{importable_module}")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'multidict._multidict', package = None

    def import_module(name, package=None):
        """Import a module.
    
        The 'package' argument is required when performing a relative import. It
        specifies the package to use as the anchor point from which to resolve the
        relative import to an absolute import.
    
        """
        level = 0
        if name.startswith('.'):
            if not package:
                msg = ("the 'package' argument is required to perform a relative "
                       "import for {!r}")
                raise TypeError(msg.format(name))
            for character in name:
                if character != '.':
                    break
                level += 1
>       return _bootstrap._gcd_import(name[level:], package, level)
E       ModuleNotFoundError: No module named 'multidict._multidict'

/usr/local/lib/python3.9/importlib/__init__.py:127: ModuleNotFoundError
=========================== short test summary info ============================
SKIPPED [2] tests/test_types.py:88: Python 3.9 uses GenericAlias which is different
================== 472 passed, 2 skipped, 439 errors in 7.49s ==================
*** Error code 1

Stop.
make: stopped in /usr/ports/www/py-multidict
